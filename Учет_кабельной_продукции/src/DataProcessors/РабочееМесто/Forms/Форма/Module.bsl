
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодключаемыеКомандыПриСоздании();
	
	ПрочитатьБазуДанныхУчетаКабельнойПродукции();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		ОбновитьСтрокуЖурналКабельнойПродукции(Параметр);
	Иначе
	    ПрочитатьБазуДанныхУчетаКабельнойПродукции();		
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ЖурналПриИзменении(Элемент)
	
	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура КабельнаяЛинияПриИзменении(Элемент)

	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикПриИзменении(Элемент)

	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиПриИзменении(Элемент)

	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассБезопасностиПриИзменении(Элемент)

	ПрочитатьДанныеУчетаКабельнойПродукции();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершенныеПриИзменении(Элемент)
		
	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

#Конецобласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеДанные   
&НаКлиенте
Процедура ДанныеУчетаКабельнойПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	// Исключаем выбор группы Журнал КП.
	Если ВыбранаПустаяСтрока(Элемент.ТекущиеДанные.КабельнаяЛиния) Тогда		
		Возврат;				
	КонецЕсли;
	
	ИдентификаторРедатируемойСтроки = ВыбраннаяСтрока;
	
	ПараметрыФормы = Новый Структура;	
	ПараметрыФормы.Вставить("ЖурналУчетаКабели", Элемент.ТекущиеДанные.ЖурналКабельнойПродукции); 
	ПараметрыФормы.Вставить("КабельнаяЛиния",    Элемент.ТекущиеДанные.КабельнаяЛиния); 	
	ОткрытьФорму("Обработка.ИнтерфейсРабочегоМеста.Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ЗагрузитьЖурналы(Команда)

	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораФайла", ЭтотОбъект);

	ПараметрыДиалога           = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = "Выберите загружаемый файл!";
	ПараметрыДиалога.Фильтр    = "Excel документ|*.xlsx;*.xls";

	НачатьПомещениеФайлаНаСервер(ОбработчикЗавершения, , , , ПараметрыДиалога, УникальныйИдентификатор);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)

	ПрочитатьБазуДанныхУчетаКабельнойПродукции();	

КонецПроцедуры

&НаКлиенте
Процедура ОтборЖурналыКП(Команда)

	ДопПараметры = Новый Структура("ИмяПоля", "ЖурналКабельнойПродукции");
	ОповещениеВыбор = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ЖурналКабельнойПродукции);
	ОткрытьФорму("Справочник.ЖурналыУчетаКабельнойПродукции.ФормаВыбора", ПараметрыФормы, КабельнаяЛиния, УникальныйИдентификатор,,,
				 ОповещениеВыбор, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборКабельнаяЛиния(Команда)
	
	ДопПараметры = Новый Структура("ИмяПоля", "КабельнаяЛиния");
	ОповещениеВыбор = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", КабельнаяЛиния);
	ОткрытьФорму("Справочник.КабельныеЛинии.ФормаВыбора", ПараметрыФормы, КабельнаяЛиния, УникальныйИдентификатор,,,
				 ОповещениеВыбор, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодрядчик(Команда)
	
	ДопПараметры = Новый Структура("ИмяПоля", "Подрядчик");
	ОповещениеВыбор = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Подрядчик);
	ОткрытьФорму("Справочник.Подрядчик.ФормаВыбора", ПараметрыФормы, Подрядчик, УникальныйИдентификатор,,,
				 ОповещениеВыбор, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборы(Команда)
	
	ЖурналКабельнойПродукции  = "";
	КабельнаяЛиния            = Неопределено;
	Подрядчик                 = Неопределено;
	СтатусЗаявки              = Неопределено;
	КлассБезопасности         = 0;
	Завершенные               = Ложь;

	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)    
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.ОсновныеДанные);  
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры)

	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()   
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ОсновныеДанные);   
	
КонецПроцедуры

#Конецобласти

#Область СлужебныеПроцедурыИФункции 
&НаСервере
Процедура ОбновитьСтрокуЖурналКабельнойПродукции(Параметр) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ЗапросДляБазыДанныеУчетаКабельнойПродукции();
	
	УсловиеОтбора = "ДанныеБазыЖурнал.Ссылка = &ЖурналКабельнойПродукции
	                |	И ДанныеБазыЖурнал.КабельнаяЛиния = &КабельнаяЛиния";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "1 = 1", УсловиеОтбора);	
	Запрос.УстановитьПараметр("ЖурналКабельнойПродукции", Параметр.ЖурналКабельнойПродукции);
	Запрос.УстановитьПараметр("КабельнаяЛиния",           Параметр.КабельнаяЛиния);
		
	Результат     = Запрос.Выполнить();	
	ВыборкаДанных = Результат.Выбрать();
	
	Если ВыборкаДанных.Следующий() Тогда
		СтрокаРедактируемая = ДанныеУчетаКабельнойПродукции.НайтиПоИдентификатору(ИдентификаторРедатируемойСтроки);		
		ЗаполнитьЗначенияСвойств(СтрокаРедактируемая, ВыборкаДанных);
	КонецЕсли;

КонецПроцедуры	

&НаСервере
Процедура ПрочитатьБазуДанныхУчетаКабельнойПродукции() 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ЗапросДляБазыДанныеУчетаКабельнойПродукции();	
	ТаблицаБазаДанныхУчетаКабельнойПродукции.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры	

&НаСервере
Функция ЗапросДляБазыДанныеУчетаКабельнойПродукции()  
	
	ЗапросТекст =  "ВЫБРАТЬ
	               |	ДанныеБазыЖурнал.ЖурналКабельнойПродукции КАК ЖурналКабельнойПродукции,
	               |	ДанныеБазыЖурнал.Изм КАК Изм,
	               |	ДанныеБазыЖурнал.ЖурналКабельнойПродукции.Объект КАК Объект,
	               |	ДанныеБазыЖурнал.МаркировкаКабеля.Наименование КАК МаркировкаКабеля,
	               |	ДанныеБазыЖурнал.КабельнаяЛиния.МаркировкаКабеляПроектная КАК МаркировкаКабеляПроектная,
	               |	ДанныеБазыЖурнал.КабельнаяЛиния.СечениеПроектное КАК СечениеПроектное,
	               |	ДанныеБазыЖурнал.КабельнаяЛиния.КлассБезопасности КАК КлассБезопасности,
	               |	ДанныеБазыЖурнал.ОткудаПомещение КАК ОткудаПомещение,
	               |	ДанныеБазыЖурнал.ОткудаОборудование КАК ОткудаОборудование,
	               |	ДанныеБазыЖурнал.ОткудаКоординаты КАК ОткудаКоординаты,
	               |	ДанныеБазыЖурнал.КудаПомещение КАК КудаПомещение,
	               |	ДанныеБазыЖурнал.КудаОборудование КАК КудаОборудование,
	               |	ДанныеБазыЖурнал.КудаКоординаты КАК КудаКоординаты,
	               |	ДанныеБазыЖурнал.ДлинаПроектная КАК ДлинаПроектная,
	               |	ДанныеБазыЖурнал.ДлинаФактическая КАК ДлинаФактическая,
	               |	ДанныеБазыЖурнал.ЖурналКабельнойПродукции.Трассировка КАК Трассировка,
	               |	ДанныеБазыЖурнал.СтатусКабельнойЛинии КАК Статус,
	               |	ДанныеБазыЖурнал.КабельнаяЛиния КАК КабельнаяЛиния,
	               |	ЗаданияНаЗакупкиСтатусы.Статус КАК СтатусЗаданияНаЗакупку,
	               |	ЗаданияНаЗакупкиСтатусы.Номер КАК НомерЗаданияНаЗакупку,
	               |	ЗаданияНаЗакупкиСтатусы.Дата КАК ДатаЗаданияНаЗакупку
	               |ИЗ
	               |	РегистрСведений.ДанныеЖурналовУчетаКП КАК ДанныеБазыЖурнал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияНаЗакупкиСтатусы КАК ЗаданияНаЗакупкиСтатусы
	               |		ПО ДанныеБазыЖурнал.КабельнаяЛиния = ЗаданияНаЗакупкиСтатусы.КабельнаяЛиния
	               |ГДЕ
	               |	1 = 1";
	
	Возврат ЗапросТекст;
	
КонецФункции	

&НаСервере
Процедура ПрочитатьДанныеУчетаКабельнойПродукции()    
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос        = Новый Запрос;
	Запрос.Текст  = ОсновнойЗапросДанныеУчетаКабельнойПродукции();
	
	СписокОтборов = СтруктураРеквизитыЗначенияОтборов();	
	Для Каждого ТекОтбор Из СписокОтборов Цикл
		Запрос.УстановитьПараметр(ТекОтбор.Ключ, ТекОтбор.Значение);		
	КонецЦикла;		
	Запрос.УстановитьПараметр("ТаблицаБаза", ТаблицаБазаДанныхУчетаКабельнойПродукции.Выгрузить());		
	
	ДанныеИзБазыДляУчетаКП = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	ЗначениеВРеквизитФормы(ДанныеИзБазыДляУчетаКП, "ДанныеУчетаКабельнойПродукции");
	
КонецПроцедуры	

&НаСервере
Функция ОсновнойЗапросДанныеУчетаКабельнойПродукции() 

	ТекстЗапроса =  "ВЫБРАТЬ
	                |	ТаблицаБаза.ЖурналКабельнойПродукции КАК ЖурналКабельнойПродукции,
	                |	ТаблицаБаза.Изм КАК Изм,
	                |	ТаблицаБаза.Объект КАК Объект,
	                |	ТаблицаБаза.МаркировкаКабеля КАК МаркировкаКабеля,
	                |	ТаблицаБаза.МаркировкаКабеляПроектная КАК МаркировкаКабеляПроектная,
	                |	ТаблицаБаза.СечениеПроектное КАК СечениеПроектное,
	                |	ТаблицаБаза.КлассБезопасности КАК КлассБезопасности,
	                |	ТаблицаБаза.ОткудаПомещение КАК ОткудаПомещение,
	                |	ТаблицаБаза.ОткудаОборудование КАК ОткудаОборудование,
	                |	ТаблицаБаза.ОткудаКоординаты КАК ОткудаКоординаты,
	                |	ТаблицаБаза.КудаПомещение КАК КудаПомещение,
	                |	ТаблицаБаза.КудаОборудование КАК КудаОборудование,
	                |	ТаблицаБаза.КудаКоординаты КАК КудаКоординаты,
	                |	ТаблицаБаза.ДлинаПроектная КАК ДлинаПроектная,
	                |	ТаблицаБаза.ДлинаФактическая КАК ДлинаФактическая,
	                |	ТаблицаБаза.Трассировка КАК Трассировка,
	                |	ТаблицаБаза.Статус КАК Статус,
	                |	ТаблицаБаза.Проверена КАК Проверена,
	                |	ТаблицаБаза.КабельнаяЛиния КАК КабельнаяЛиния,
	                |	ТаблицаБаза.СтатусЗаданияНаЗакупку КАК СтатусЗаданияНаЗакупку,
	                |	ТаблицаБаза.НомерЗаданияНаЗакупку КАК НомерЗаданияНаЗакупку,
	                |	ТаблицаБаза.ДатаЗаданияНаЗакупку КАК ДатаЗаданияНаЗакупку
	                |ПОМЕСТИТЬ ДанныеПоЖурналам
	                |ИЗ
	                |	&ТаблицаБаза КАК ТаблицаБаза
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ДанныеПоЖурналам.ЖурналКабельнойПродукции КАК ЖурналКабельнойПродукции,
	                |	ДанныеПоЖурналам.Изм КАК Изм,
	                |	ДанныеПоЖурналам.Объект КАК Объект,
	                |	ДанныеПоЖурналам.МаркировкаКабеля КАК МаркировкаКабеля,
	                |	ДанныеПоЖурналам.МаркировкаКабеляПроектная КАК МаркировкаКабеляПроектная,
	                |	ДанныеПоЖурналам.СечениеПроектное КАК СечениеПроектное,
	                |	ДанныеПоЖурналам.КлассБезопасности КАК КлассБезопасности,
	                |	ДанныеПоЖурналам.ОткудаПомещение КАК ОткудаПомещение,
	                |	ДанныеПоЖурналам.ОткудаОборудование КАК ОткудаОборудование,
	                |	ДанныеПоЖурналам.ОткудаКоординаты КАК ОткудаКоординаты,
	                |	ДанныеПоЖурналам.КудаПомещение КАК КудаПомещение,
	                |	ДанныеПоЖурналам.КудаОборудование КАК КудаОборудование,
	                |	ДанныеПоЖурналам.КудаКоординаты КАК КудаКоординаты,
	                |	ДанныеПоЖурналам.ДлинаПроектная КАК ДлинаПроектная,
	                |	ДанныеПоЖурналам.ДлинаФактическая КАК ДлинаФактическая,
	                |	ДанныеПоЖурналам.Трассировка КАК Трассировка,
	                |	ДанныеПоЖурналам.Статус КАК Статус,
	                |	ДанныеПоЖурналам.Проверена КАК Проверена,
	                |	ДанныеПоЖурналам.КабельнаяЛиния КАК КабельнаяЛиния,
	                |	ДанныеПоЖурналам.СтатусЗаданияНаЗакупку КАК СтатусЗаданияНаЗакупку,
	                |	ДанныеПоЖурналам.НомерЗаданияНаЗакупку КАК НомерЗаданияНаЗакупку,
	                |	ДанныеПоЖурналам.ДатаЗаданияНаЗакупку КАК ДатаЗаданияНаЗакупку
	                |ИЗ
	                |	ДанныеПоЖурналам КАК ДанныеПоЖурналам
	                |ГДЕ
	                |	1 = 1
	                |ИТОГИ
	                |	МАКСИМУМ(Изм),
	                |	МАКСИМУМ(Объект)
	                |ПО
	                |	ЖурналКабельнойПродукции";   
		
	СтруктураУсловия = СтруктураРеквизитыЗначенияОтборов();	
	
	УсловиеЗапроса = "";	
	Для Каждого КлючЗначение Из СтруктураУсловия Цикл
		Если ЗначениеЗаполнено(ЭтотОбъект[КлючЗначение.Ключ]) Тогда
			
			Если КлючЗначение.Ключ = "Проверена" И ЭтотОбъект[КлючЗначение.Ключ] = Ложь Тогда     
				Продолжить;
			КонецЕсли;	       
			
			УсловиеЗапроса = УсловиеЗапроса + ?(УсловиеЗапроса <> "", " И ", "") + "ДанныеПоЖурналам." + КлючЗначение.Ключ + "= &" + КлючЗначение.Ключ;
		КонецЕсли;
    КонецЦикла;
	
	Если УсловиеЗапроса <> "" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1 = 1", УсловиеЗапроса);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции		

&НаСервере
Функция СтруктураРеквизитыЗначенияОтборов() 
	
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("ЖурналКабельнойПродукции", ЖурналКабельнойПродукции); 
	СтруктураУсловия.Вставить("КабельнаяЛиния",           КабельнаяЛиния); 
	СтруктураУсловия.Вставить("Статус",                   Статус); 
	СтруктураУсловия.Вставить("КлассБезопасности",        КлассБезопасности);
	СтруктураУсловия.Вставить("Проверена",                Проверена);	
	
	Возврат СтруктураУсловия;
	
КонецФункции	

&НаКлиенте
Функция ВыбранаПустаяСтрока(ПроверяемыеДанные)
	
	Возврат Не ЗначениеЗаполнено(ПроверяемыеДанные);	
	
КонецФункции

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)   
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.ОсновныеДанные); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДопПараметры) Экспорт

	ЭтотОбъект[ДопПараметры.ИмяПоля] = Результат;
	
	ПрочитатьДанныеУчетаКабельнойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнтерфейсЗагрузкиФайлаЭксель(АдреВременногоХранилищаФайла, РасширениеФайла)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресДвоичныхДанных", АдреВременногоХранилищаФайла);
	ПараметрыФормы.Вставить("РасширениеФайла",     РасширениеФайла);	
	ОткрытьФорму("Обработка.ЗагрузкаЖурналУчетаКабельнойПродукции.Форма", ПараметрыФормы, 
				 ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайла(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	АдресВременногоХранилищаФайла = РезультатВыбора.Адрес;	
	РасширениеФайла               = СтрЗаменить(РезультатВыбора.СсылкаНаФайл.Расширение, ".", "");
	
	ОткрытьИнтерфейсЗагрузкиФайлаЭксель(АдресВременногоХранилищаФайла, РасширениеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПодключаемыеКомандыПриСоздании()

	ПараметрыРазмещения = Новый Структура;  
	ПараметрыРазмещения.Вставить("Источники", Новый ОписаниеТипов("СправочникСсылка.ЖурналыУчетаКабельнойПродукции"));
	ПараметрыРазмещения.Вставить("КоманднаяПанель", КоманднаяПанель);
    ПараметрыРазмещения.Вставить("ПрефиксГрупп", "");	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
КонецПроцедуры
#КонецОбласти 
