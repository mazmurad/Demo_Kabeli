#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	АдресДвоичныхДанных = Неопределено;
	РасширениеФайла     = Неопределено;

	// При открытии из формы владельца, сразу загружаем данные в табличный документ
	Если Параметры.Свойство("АдресДвоичныхДанных", АдресДвоичныхДанных) И Параметры.Свойство("РасширениеФайла",
		РасширениеФайла) Тогда
		ЗагрузитьДанныеФайлаВТабличныйДокумент(АдресДвоичныхДанных, РасширениеФайла);
	Иначе
		// Без формы владельца
		Элементы.ПутьКФайлу.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Оповестить();
       
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("Заголовок", НСтр("ru=’Выберите файл Excel’"));
	НастройкиДиалога.Вставить("Фильтр",    
		НСтр("ru=’Файл Excel (*.xlsb)|*.xlsb|Книга Excel 2007 (*.xlsx)|*.xlsx|Книга Excel 97 (*.xls)|*.xls’"));
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(ЭтотОбъект, "ПутьКФайлу",, НастройкиДиалога);

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОтменитьЗагрузку(Команда)

	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)

	// Файл выбран на текущей форме, загрузка файла в табличный документ
	Если ПутьКФайлу <> "" Тогда
		
		ВыбранныйФайл   = Новый Файл(ПутьКФайлу);	
		РасширениеФайла = ВыбранныйФайл.Расширение;
		
		ДВДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
		АдресДВФайла  = ПоместитьВоВременноеХранилище(ДВДанныеФайла, УникальныйИдентификатор);
		ЗагрузитьДанныеФайлаВТабличныйДокумент(АдресДВФайла, РасширениеФайла);
	КонецЕсли;	

	ПрочитатьИЗагрузитьКабельныеЖурналы();
	
	ОбновитьОтображениеДанных();
	
	Закрыть();

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПрочитатьИЗагрузитьКабельныеЖурналы()
	
	// Собрать данные файла в массив структуры
	ТабДок = Объект.ДанныеИзФайлаЭксель;

	МассивДанных    = Новый Массив;
	КоличествоСтрок = ТабДок.ВысотаТаблицы;

	ИменаПолейИИхКоординаты = ПолучитьСоответствиеИменаПолейКоординаты();
	КоличествоКолонок       = ИменаПолейИИхКоординаты.Количество();
	
	// Обход строк файла и загрузка каждой строки в массив
	Для R = 2 По КоличествоСтрок Цикл

		СтрокаДанных = Новый Структура(ПолучитьИменаПолей() + "," + ДополнительныеПоля());
		Для C = 1 По КоличествоКолонок Цикл

			Попытка

				КоординтыПоля = "Rx" + "C" + C;
				ИмяПоля       = ИменаПолейИИхКоординаты.Получить(КоординтыПоля);
				ИмяОбласти    = СтрЗаменить(КоординтыПоля, "x", Формат(R, "ЧГ=0;"));

				ТекстЯчейки           = Строка(ТабДок.ПолучитьОбласть(ИмяОбласти).ТекущаяОбласть.Текст);
				СтрокаДанных[ИмяПоля] = ТекстЯчейки;
			Исключение

				ТекстОшибки = ОписаниеОшибки();
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗаписьЖурналаРегистрации("Загрузка кабельных журналов", УровеньЖурналаРегистрации.Ошибка, , , 
				ТекстОшибки, );
				Прервать;
			КонецПопытки;

		КонецЦикла;
		МассивДанных.Добавить(СтрокаДанных);

	КонецЦикла;

	Если МассивДанных.Количество() > 0 Тогда
		ПродолжитьЧтениеИЗагрузкуКабельныхЖурналов(МассивДанных);
	Иначе
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Файл пустой!");			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИменаПолейКоординаты()

	ИменаПолейКоординаты = Новый Соответствие;
	ИменаПолейКоординаты.Вставить("RxC1", "НомерПП");
	ИменаПолейКоординаты.Вставить("RxC2", "НомерПроекта");
	ИменаПолейКоординаты.Вставить("RxC3", "АрхивныйНомер");
	ИменаПолейКоординаты.Вставить("RxC4", "Объект");
	ИменаПолейКоординаты.Вставить("RxC5", "Изм");
	ИменаПолейКоординаты.Вставить("RxC6", "НомерНитки");
	ИменаПолейКоординаты.Вставить("RxC7", "МаркировкаКабеля");
	ИменаПолейКоординаты.Вставить("RxC8", "МаркировкаКабеляПроектная");
	ИменаПолейКоординаты.Вставить("RxC9", "СечениеПроектное");
	ИменаПолейКоординаты.Вставить("RxC10", "КлассБезопасности");
	ИменаПолейКоординаты.Вставить("RxC11", "ОткудаПомещение");
	ИменаПолейКоординаты.Вставить("RxC12", "ОткудаОборудование");
	ИменаПолейКоординаты.Вставить("RxC13", "X");
	ИменаПолейКоординаты.Вставить("RxC14", "Y");
	ИменаПолейКоординаты.Вставить("RxC15", "Z");
	ИменаПолейКоординаты.Вставить("RxC16", "КудаПомещение");
	ИменаПолейКоординаты.Вставить("RxC17", "КудаОборудование");
	ИменаПолейКоординаты.Вставить("RxC18", "X1");
	ИменаПолейКоординаты.Вставить("RxC19", "Y1");
	ИменаПолейКоординаты.Вставить("RxC20", "Z1");
	ИменаПолейКоординаты.Вставить("RxC21", "Длина");

	Возврат ИменаПолейКоординаты;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИменаПолей()

	ИменаПолейИИхКоординаты = ПолучитьСоответствиеИменаПолейКоординаты();

	ИменаПолей = "";
	Для Каждого ТекПолеКоординат Из ИменаПолейИИхКоординаты Цикл
		ИменаПолей = ИменаПолей + ?(ИменаПолей <> "", ",", "") + ТекПолеКоординат.Значение;
	КонецЦикла;

	Возврат ИменаПолей;

КонецФункции

&НаСервереБезКонтекста
Функция ДополнительныеПоля()
	
	Возврат "Проект, КабельнаяЛиния, ОткудаКоординаты, КудаКоординаты";
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ПродолжитьЧтениеИЗагрузкуКабельныхЖурналов(МассивДанныхТабДок)

	УстановитьПривилегированныйРежим(Истина);

	ТаблицаДанныхКЖ = ПреобразоватьМассивВТаблицуЗначений(МассивДанныхТабДок);

	// Поиск ссылок на: Проект, Кабельные линии
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КабельныеЖурналы", ТаблицаДанныхКЖ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КабельныеЖурналы.НомерПроекта КАК СТРОКА(299)) КАК НомерПроекта,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Объект КАК СТРОКА(299)) КАК Объект,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.МаркировкаКабеля КАК СТРОКА(199)) КАК МаркировкаКабеля,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.МаркировкаКабеляПроектная КАК СТРОКА(299)) КАК МаркировкаКабеляПроектная,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.СечениеПроектное КАК СТРОКА(299)) КАК СечениеПроектное,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.X КАК СТРОКА(10)) КАК X,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Y КАК СТРОКА(10)) КАК Y,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Z КАК СТРОКА(10)) КАК Z,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.X1 КАК СТРОКА(10)) КАК X1,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Y1 КАК СТРОКА(10)) КАК Y1,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Z1 КАК СТРОКА(10)) КАК Z1
	|ПОМЕСТИТЬ КабельныеЖурналы
	|ИЗ
	|	&КабельныеЖурналы КАК КабельныеЖурналы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КабельныеЖурналы.НомерПроекта КАК НомерПроекта,
	|	Проекты.Ссылка КАК Проект,
	|	КабельныеЖурналы.МаркировкаКабеля КАК МаркировкаКабеля,
	|	КабельныеЖурналы.МаркировкаКабеляПроектная КАК МаркировкаКабеляПроектная,
	|	КабельныеЖурналы.СечениеПроектное КАК СечениеПроектное,
	|	СТРЗАМЕНИТЬ(КабельныеЖурналы.X + (ВЫРАЗИТЬ(""/"" КАК СТРОКА(1))) + КабельныеЖурналы.Y + (ВЫРАЗИТЬ(""/"" КАК СТРОКА(1))) + КабельныеЖурналы.Z, "" "", """") КАК НаименованиеОткудаКоординаты,
	|	СТРЗАМЕНИТЬ(КабельныеЖурналы.X1 + (ВЫРАЗИТЬ(""/"" КАК СТРОКА(1))) + КабельныеЖурналы.Y1 + (ВЫРАЗИТЬ(""/"" КАК СТРОКА(1))) + КабельныеЖурналы.Z1, "" "", """") КАК НаименованиеКудаКоординаты,
	|	КабельныеЖурналы.Объект КАК Объект,
	|	КабельныеЖурналы.МаркировкаКабеля КАК МаркировкаКабеляКлюч
	|ПОМЕСТИТЬ ВТ_ДанныеФайлаФормироватьНаименованиеКоординат
	|ИЗ
	|	КабельныеЖурналы КАК КабельныеЖурналы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО КабельныеЖурналы.НомерПроекта = Проекты.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.НомерПроекта КАК НомерПроекта,
	|	ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.Проект КАК Проект,
	|	МаркиКабели.Ссылка КАК МаркировкаКабеля,
	|	МаркиКабелиПроектные.Наименование КАК МаркировкаКабеляПроектная,
	|	Сечения.Ссылка КАК СечениеПроектное,
	|	Координаты.Ссылка КАК ОткудаКоординаты,
	|	Координаты1.Ссылка КАК КудаКоординаты,
	|	Объекты.Ссылка КАК Объект,
	|	ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.МаркировкаКабеляКлюч КАК МаркировкаКабеляКлюч,
	|	ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.НаименованиеОткудаКоординаты КАК НаименованиеОткудаКоординаты,
	|	ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.НаименованиеКудаКоординаты КАК НаименованиеКудаКоординаты
	|ПОМЕСТИТЬ ВТ_ДанныеБезКабельнойЛинии
	|ИЗ
	|	ВТ_ДанныеФайлаФормироватьНаименованиеКоординат КАК ВТ_ДанныеФайлаФормироватьНаименованиеКоординат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаркиКабели КАК МаркиКабели
	|		ПО ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.МаркировкаКабеля = МаркиКабели.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаркиКабелиПроектные КАК МаркиКабелиПроектные
	|		ПО ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.МаркировкаКабеляПроектная = МаркиКабелиПроектные.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сечения КАК Сечения
	|		ПО ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.СечениеПроектное = Сечения.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Координаты КАК Координаты
	|		ПО ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.НаименованиеОткудаКоординаты = Координаты.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Координаты КАК Координаты1
	|		ПО ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.НаименованиеКудаКоординаты = Координаты1.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Объекты КАК Объекты
	|		ПО ВТ_ДанныеФайлаФормироватьНаименованиеКоординат.Объект = Объекты.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеБезКабельнойЛинии.НомерПроекта КАК НомерПроекта,
	|	ВТ_ДанныеБезКабельнойЛинии.Проект КАК Проект,
	|	ВТ_ДанныеБезКабельнойЛинии.МаркировкаКабеля КАК МаркировкаКабеля,
	|	ВТ_ДанныеБезКабельнойЛинии.МаркировкаКабеляПроектная КАК МаркировкаКабеляПроектная,
	|	ВТ_ДанныеБезКабельнойЛинии.СечениеПроектное КАК СечениеПроектное,
	|	ВТ_ДанныеБезКабельнойЛинии.ОткудаКоординаты КАК ОткудаКоординаты,
	|	ВТ_ДанныеБезКабельнойЛинии.КудаКоординаты КАК КудаКоординаты,
	|	ВТ_ДанныеБезКабельнойЛинии.Объект КАК Объект,
	|	ВТ_ДанныеБезКабельнойЛинии.МаркировкаКабеляКлюч КАК МаркировкаКабеляКлюч,
	|	КабельныеЛинии.Ссылка КАК КабельнаяЛиния,
	|	ВТ_ДанныеБезКабельнойЛинии.НаименованиеОткудаКоординаты КАК НаименованиеОткудаКоординаты,
	|	ВТ_ДанныеБезКабельнойЛинии.НаименованиеКудаКоординаты КАК НаименованиеКудаКоординаты
	|ИЗ
	|	ВТ_ДанныеБезКабельнойЛинии КАК ВТ_ДанныеБезКабельнойЛинии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КабельныеЛинии КАК КабельныеЛинии
	|		ПО ВТ_ДанныеБезКабельнойЛинии.МаркировкаКабеляПроектная = КабельныеЛинии.МаркировкаКабеляПроектная
	|			И ВТ_ДанныеБезКабельнойЛинии.СечениеПроектное = КабельныеЛинии.СечениеПроектное";

	
	// Дополнение итоговой таблицы колонками тип строка
	ТипСтрока     = Новый ОписаниеТипов("Строка", ,
					Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная));
	ТаблицаДанных = Запрос.Выполнить().Выгрузить(); 
	Для Каждого ТекКолонкаДанныхФайл Из ТаблицаДанныхКЖ.Колонки Цикл
		Если ТаблицаДанных.Колонки.Найти(ТекКолонкаДанныхФайл.Имя) = Неопределено Тогда
			ТаблицаДанных.Колонки.Добавить(ТекКолонкаДанныхФайл.Имя, ТипСтрока); 		
		КонецЕсли;	
	КонецЦикла;        
	
	ПервыйПроход = Истина;
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл  
		
		Если ПервыйПроход Тогда
			Проект       = ТекСтрока.Проект;  
			Объект       = ТекСтрока.Объект;
			ПервыйПроход = Ложь;
		КонецЕсли;

		СечениеПроектное    = ТекСтрока.СечениеПроектное;    
		МаркировкаКабеляПроектная = ТекСтрока.МаркировкаКабеляПроектная;   
		МаркировкаКабеля    = ТекСтрока.МаркировкаКабеля;
		КабельнаяЛиния      = ТекСтрока.КабельнаяЛиния;
		ОткудаКоординаты    = ТекСтрока.ОткудаКоординаты;
		КудаКоординаты      = ТекСтрока.КудаКоординаты;
		
		МассивДанныхФайлПоНомеруПроекта = ТаблицаДанныхКЖ.НайтиСтроки(Новый Структура("НомерПроекта, МаркировкаКабеля", 
			СокрЛП(ТекСтрока.НомерПроекта), СокрЛП(ТекСтрока.МаркировкаКабеляКлюч)));
			
		// Не нашли данные в файле по номеру проекта либо нашли две строки по уникальной марке
		Если МассивДанныхФайлПоНомеруПроекта.Количество() = 0 
				Или МассивДанныхФайлПоНомеруПроекта.Количество() > 1 Тогда
			Продолжить;	
		КонецЕсли;
		
		// Область поиска данных
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ПроектСоздать(МассивДанныхФайлПоНомеруПроекта[0]);		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект) Тогда
			Объект = ОбъектСоздать(МассивДанныхФайлПоНомеруПроекта[0]);			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СечениеПроектное) Тогда
			СечениеПроектное = СечениеПроектноеСоздать(МассивДанныхФайлПоНомеруПроекта[0]);			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МаркировкаКабеляПроектная) Тогда
			МаркировкаКабеляПроектная = МаркировкаПроектнаяСоздать(МассивДанныхФайлПоНомеруПроекта[0]);			
		КонецЕсли;

		Если Не ЗначениеЗаполнено(МаркировкаКабеля) Тогда
			МаркировкаКабеля = МаркировкаКабеляСоздать(МассивДанныхФайлПоНомеруПроекта[0]);			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КабельнаяЛиния) И ЗначениеЗаполнено(СечениеПроектное) 
			И ЗначениеЗаполнено(МаркировкаКабеляПроектная) Тогда
			КабельнаяЛиния = КабельнаяЛинияСоздать(МассивДанныхФайлПоНомеруПроекта[0], МаркировкаКабеляПроектная, СечениеПроектное);			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КудаКоординаты) Тогда
			КудаКоординаты = КудаКоординатыСоздать(МассивДанныхФайлПоНомеруПроекта[0]);			
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ОткудаКоординаты) Тогда
			ОткудаКоординаты = ОткудаКоординатыСоздать(МассивДанныхФайлПоНомеруПроекта[0]);			
		КонецЕсли;  
		// -- Область поиска данных
		
		// Область Проверки   
		
		// -- Область проверки
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, МассивДанныхФайлПоНомеруПроекта[0],, 
			"Проект, Объект, СечениеПроектное, МаркировкаКабеляПроектная, КабельнаяЛиния, КудаКоординаты, ОткудаКоординаты, МаркировкаКабеля"); 
		
		ТекСтрока.Проект           = Проект;
		ТекСтрока.Объект           = Объект;
		ТекСтрока.СечениеПроектное = СечениеПроектное;
		ТекСтрока.МаркировкаКабеляПроектная = МаркировкаКабеляПроектная;
		ТекСтрока.МаркировкаКабеля = МаркировкаКабеля;
		ТекСтрока.КабельнаяЛиния   = КабельнаяЛиния;
		ТекСтрока.КудаКоординаты   = КудаКоординаты;
		ТекСтрока.ОткудаКоординаты = ОткудаКоординаты;	
	КонецЦикла;

	Если ТаблицаДанных.Количество() > 0 И ЗначениеЗаполнено(ТаблицаДанных[0].Проект) Тогда
		СоздатьЖурналыУчетаКабельнойПродукции(ТаблицаДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьМассивВТаблицуЗначений(МассивДанные)

	СтруктураКолонок = Новый Структура;
	
	Для Каждого ЭлементМассива Из МассивДанные Цикл
		//Ввиду того что массив может попасться разноколоночны нужно проверять не только первую строку
		//А так же если типы отличаются в разных элементах массива нужно иметь возможность получить читабельную ТЗ
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			ТипЗначенияКолонки = ТипЗнч(ЗначениеСтруктуры.Значение);
			Если НЕ СтруктураКолонок.Свойство(ЗначениеСтруктуры.Ключ) Тогда
				МассивДопустимыеТипы = Новый Массив;
				МассивДопустимыеТипы.Добавить(ТипЗначенияКолонки);
				СтруктураКолонок.Вставить(ЗначениеСтруктуры.Ключ,МассивДопустимыеТипы);
			Иначе
				СодержитТип = СтруктураКолонок[ЗначениеСтруктуры.Ключ].Найти(ТипЗначенияКолонки);
				Если СодержитТип = Неопределено Тогда
					СтруктураКолонок[ЗначениеСтруктуры.Ключ].Добавить(ТипЗначенияКолонки)
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Создадим ТЗ
	ТаблицаДанные = Новый ТаблицаЗначений;
	
	//Добавим Колонки в тз
	Для Каждого Колонка Из СтруктураКолонок Цикл
		ТаблицаДанные.Колонки.Добавить(Колонка.Ключ,Новый ОписаниеТипов(Колонка.Значение));		
	КонецЦикла;
	
	//Теперь можно обработать нормально массив
	Для Каждого ЭлементМассива Из МассивДанные Цикл
		СтрокаТЗ = ТаблицаДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ,ЭлементМассива);
	КонецЦикла;
	
	Возврат ТаблицаДанные;

КонецФункции

&НаСервереБезКонтекста
Функция КабельнаяЛинияПолучитьСоздать(ТекСтрока, СечениеПроектное, МаркировкаПроектная)

	УстановитьПривилегированныйРежим(Истина);

	СсылкаКабельнаяЛиния = ТекСтрока.КабельнаяЛиния;
	Если Не ЗначениеЗаполнено(ТекСтрока.КабельнаяЛиния) Тогда

		КабельнаяЛиния                     = Справочники.КабельныеЛинии.СоздатьЭлемент();
		КабельнаяЛиния.Наименование        = ТекСтрока.СтрокаМаркировкаКабеляПроектная; 
		КабельнаяЛиния.КлассБезопасности   = ТекСтрока.КлассБезопасности;    
		КабельнаяЛиния.СечениеПроектное    = СечениеПроектное;
		КабельнаяЛиния.МаркировкаКабеляПроектная = МаркировкаПроектная;
		
		КабельнаяЛиния.ОбменДанными.Загрузка = Истина;
		КабельнаяЛиния.Записать();

		СсылкаКабельнаяЛиния = КабельнаяЛиния.Ссылка;
	КонецЕсли;

	Возврат СсылкаКабельнаяЛиния;

КонецФункции

&НаСервереБезКонтекста
Функция КоординатыПолучитьСоздать(ТекСтрока)

	УстановитьПривилегированныйРежим(Истина);

	КоординатыОткудаКуда = Новый Структура("ОткудаКоординаты, КудаКоординаты", 
		Справочники.Координаты.ПустаяСсылка(), Справочники.Координаты.ПустаяСсылка());


	КоординатX = ТекСтрока.X;
	КоординатY = ТекСтрока.Y;
	КоординатZ = ТекСтрока.Z;

	КоординатX1 = ТекСтрока.X1;
	КоординатY1 = ТекСтрока.Y1;
	КоординатZ1 = ТекСтрока.Z1;

	КоординатыОткудаКуда.ОткудаКоординаты = Справочники.Координаты.НайтиПоНаименованию(
		СтрЗаменить(ТекСтрока.НаименованиеОткудаКоординаты, " ", ""));

	Если Не ЗначениеЗаполнено(КоординатыОткудаКуда.ОткудаКоординаты) Тогда

		Наименование = КоординатX + "/" + КоординатY + "/" + КоординатZ;

		Если Не СтрЗаменить(Наименование, "//", "") = "" Тогда
	
			Координаты   = Справочники.Координаты.СоздатьЭлемент();
			Координаты.X = КоординатX;
			Координаты.Y = КоординатY;
			Координаты.Z	 = КоординатZ;
			Координаты.Наименование = Наименование;
			
			Координаты.Записать();

			КоординатыОткудаКуда.ОткудаКоординаты = Координаты.Ссылка;
		КонецЕсли;
	КонецЕсли;

	КоординатыОткудаКуда.КудаКоординаты = Справочники.Координаты.НайтиПоНаименованию(
		СтрЗаменить(ТекСтрока.НаименованиеКудаКоординаты, " ", ""));

	Если Не ЗначениеЗаполнено(КоординатыОткудаКуда.КудаКоординаты) Тогда

		Наименование = КоординатX1 + "/" + КоординатY1 + "/" + КоординатZ1;

		Если Не СтрЗаменить(Наименование, "//", "") = "" Тогда
	
			Координаты   = Справочники.Координаты.СоздатьЭлемент();
			Координаты.X = КоординатX1;
			Координаты.Y = КоординатY1;
			Координаты.Z	 = КоординатZ1;
			Координаты.Наименование = Наименование;
			
			Координаты.Записать();

			КоординатыОткудаКуда.КудаКоординаты = Координаты.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат КоординатыОткудаКуда;

КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьЖурналыУчетаКабельнойПродукции(ТаблицаДанныхКЖ)

	УстановитьПривилегированныйРежим(Истина);

	// У каждого журнала свой список кабельных линий, у каждого Кж свой проект
	ТаблицаШапкаЖурнала = ТаблицаДанныхКЖ.Скопировать();
	ТаблицаШапкаЖурнала.Свернуть("Проект");

	Для Каждого СтрокаПроект Из ТаблицаШапкаЖурнала Цикл
		
		// Попытка поиска КЖ по проекту
		ЖурналУчетаКП = Справочники.ЖурналыУчетаКабельнойПродукции.НайтиПоРеквизиту("Проект", СтрокаПроект.Проект);
		Если НЕ ЗначениеЗаполнено(ЖурналУчетаКП) Тогда
			ЖурналУчетаКП = Справочники.ЖурналыУчетаКабельнойПродукции.СоздатьЭлемент();
		Иначе
			ЖурналУчетаКП = ЖурналУчетаКП.ПолучитьОбъект();	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(ЖурналУчетаКП, СтрокаПроект);

		// Поиск кабельных линий по проекту(по журналу). Загрузка в КЖ
		ДанныеКабельныеЛинии = ТаблицаДанныхКЖ.НайтиСтроки(Новый Структура("Проект", СтрокаПроект.Проект));
		ЖурналУчетаКП.КабельныеЛинии.Очистить();
		Для Каждого СтрокаКабельнаяЛиния Из ДанныеКабельныеЛинии Цикл   
			
			Если Не ЗначениеЗаполнено(СтрокаКабельнаяЛиния.КабельнаяЛиния) Тогда
				Продолжить;	
			КонецЕсли;
			
			НовСтр = ЖурналУчетаКП.КабельныеЛинии.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаКабельнаяЛиния);
		КонецЦикла;	

		// Попытка записи КЖ, если ошибка переходим к след. журналу
		Если ЖурналУчетаКП.КабельныеЛинии.Количество() > 0 Тогда
			Попытка
				ЖурналУчетаКП.Записать();
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналУчетаКП.Ссылка);				
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				//@skip-check object-deprecated				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);		
				ЗаписьЖурналаРегистрации("Загрузка кабельных журналов", УровеньЖурналаРегистрации.Ошибка, 
				, , ТекстОшибки);	
				Продолжить;	
			КонецПопытки;		
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроектСоздать(ДанныеИзФайла)

	УстановитьПривилегированныйРежим(Истина);

	Проект              = Справочники.Проекты.СоздатьЭлемент();
	Проект.Наименование = ДанныеИзФайла.НомерПроекта;
	ЗаполнитьЗначенияСвойств(Проект, ДанныеИзФайла);
	Проект.Записать();

	СсылкаПроект = Проект.Ссылка;

	Возврат СсылкаПроект;

КонецФункции

&НаСервереБезКонтекста
Функция ОбъектСоздать(ДанныеИзФайла)

	УстановитьПривилегированныйРежим(Истина);

	Объект              = Справочники.Объекты.СоздатьЭлемент();
	Объект.Наименование = ДанныеИзФайла.Объект;
	Объект.Записать();

	СсылкаОбъект = Объект.Ссылка;

	Возврат СсылкаОбъект;

КонецФункции

&НаСервереБезКонтекста
Функция КабельнаяЛинияСоздать(ДанныеИзФайла, Марка, Сечение)

	УстановитьПривилегированныйРежим(Истина);

	КабельнаяЛиния                     = Справочники.КабельныеЛинии.СоздатьЭлемент();
	КабельнаяЛиния.Наименование        = ДанныеИзФайла.МаркировкаКабеляПроектная + "/" + ДанныеИзФайла.СечениеПроектное; 
	КабельнаяЛиния.СечениеПроектное    = Сечение; 
	КабельнаяЛиния.МаркировкаКабеляПроектная = Марка; 
	КабельнаяЛиния.Записать();

	СсылкаКабельнаяЛиния = КабельнаяЛиния.Ссылка;
	Возврат СсылкаКабельнаяЛиния;

КонецФункции

&НаСервереБезКонтекста
Функция СечениеПроектноеСоздать(ДанныеИзФайла)

	УстановитьПривилегированныйРежим(Истина);

	СечениеПроектное              = Справочники.Сечения.СоздатьЭлемент();
	СечениеПроектное.Наименование = ДанныеИзФайла.СечениеПроектное;
	СечениеПроектное.Записать();

	СсылкаСечениеПроектное = СечениеПроектное.Ссылка;
	Возврат СсылкаСечениеПроектное;

КонецФункции

&НаСервереБезКонтекста
Функция МаркировкаПроектнаяСоздать(ДанныеИзФайла)   

	УстановитьПривилегированныйРежим(Истина);

	МаркировкаПроектная           = Справочники.МаркиКабелиПроектные.СоздатьЭлемент();
	МаркировкаПроектная.Наименование = ДанныеИзФайла.МаркировкаКабеляПроектная;
	МаркировкаПроектная.Записать();

	СсылкаМаркировкаПроектная = МаркировкаПроектная.Ссылка;
	Возврат СсылкаМаркировкаПроектная;
	
КонецФункции

&НаСервереБезКонтекста
Функция МаркировкаКабеляСоздать(ДанныеИзФайла)   

	УстановитьПривилегированныйРежим(Истина);

	МаркировкаКабеля              = Справочники.МаркиКабели.СоздатьЭлемент();
	МаркировкаКабеля.Наименование = ДанныеИзФайла.МаркировкаКабеля;
	МаркировкаКабеля.Записать();

	СсылкаМаркировкаКабеля = МаркировкаКабеля.Ссылка;
	Возврат СсылкаМаркировкаКабеля;
	
КонецФункции

&НаСервереБезКонтекста
Функция КудаКоординатыСоздать(ДанныеИзФайла)   

	УстановитьПривилегированныйРежим(Истина);

	КудаКоординаты              = Справочники.Координаты.СоздатьЭлемент();
	КудаКоординаты.Наименование = ДанныеИзФайла.КудаКоординаты;
	КудаКоординаты.Записать();

	СсылкаКудаКоординаты = КудаКоординаты.Ссылка;
	Возврат СсылкаКудаКоординаты;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткудаКоординатыСоздать(ДанныеИзФайла)   

	УстановитьПривилегированныйРежим(Истина);

	ОткудаКоординаты              = Справочники.Координаты.СоздатьЭлемент();
	ОткудаКоординаты.Наименование = ДанныеИзФайла.ОткудаКоординаты;
	ОткудаКоординаты.Записать();

	СсылкаОткудаКоординаты = ОткудаКоординаты.Ссылка;
	Возврат СсылкаОткудаКоординаты;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеФайлаВТабличныйДокумент(АдресДвоичныхДанных, РасширениеФайла)

	// Перенос файла с клиента на сервер в временный файл
	АдресВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	ДвоичныеДанные.Записать(АдресВременногоФайла);

	// Загрузка файла в табличный документ как есть
	Объект.ДанныеИзФайлаЭксель.Прочитать(АдресВременногоФайла);

	УдалитьФайлы(АдресВременногоФайла);

КонецПроцедуры
#КонецОбласти

