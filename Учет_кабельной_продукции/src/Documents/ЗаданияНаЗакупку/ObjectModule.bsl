
#Область ОбработчикиСобытийОбъекта
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", Ссылка.Пустая());
	
	Если Не ЭтоАннулирование() И Не ДополнительныеСвойства.ЭтоНовый 
		И УправлениеДоступом.ЕстьРоль("Подрядчик", Ссылка, Пользователи.АвторизованныйПользователь()) Тогда		
		СтатусДокумента = ПолучитьСтатус();    		
	КонецЕсли;
	
	Если СтатусДокумента = Перечисления.СтатусыЗаданийНаЗакупку.Принято Тогда   
		ЗаписатьКабельныеЛинииВПринятые();
	Иначе
		УдалитьКабельныеЛинииИзПринятых();
	КонецЕсли;			
	
КонецПроцедуры 

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда   
		СписокСвязанныхДокументов = КонтрольУдаленияДокументовСервер.ПолучитьСвязанныеДокументыЗаданияНаЗакупки(Ссылка);		
		КонтрольУдаленияДокументовСервер.ПроверитьЕстьСвязанныеДокументыПередПометкойУдаления(Ссылка, СписокСвязанныхДокументов, Отказ);		
	КонецЕсли;	
	
	Если Не ЭтоАннулирование() И Не ДополнительныеСвойства.ЭтоНовый Тогда
		ПроверитьВозможностьЗаписиСНеПринятымиПозициями(Отказ);		
	КонецЕсли;

	УдалитьСтатусыДокументаИзУчета();	
		
	Если Не ПометкаУдаления Тогда
		ЗафиксироватьСтатусДокумента();  
	КонецЕсли;

	СтатусКабельнойЛинии = СтатусыСервер.ПолучитьСтатусКабельнойЛинии(СтатусДокумента, ПометкаУдаления);     
	Если ЗначениеЗаполнено(СтатусКабельнойЛинии) Тогда
		ПроведениеСервер.ЗаписьДанныеВРСДанныеЖКП(КабельныеЛинии,,СтатусКабельнойЛинии, Истина);   
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти

#Область ПрочиеПроцедурыИФункции 
Функция ПолучитьСтатус()
	
	СтрокаНеПринято = КабельныеЛинии.Найти(Ложь, "Принято");
	
	Если Не СтрокаНеПринято = Неопределено Тогда
		Возврат Перечисления.СтатусыЗаданийНаЗакупку.НаДоработке;
	Иначе
		Возврат Перечисления.СтатусыЗаданийНаЗакупку.Принято;	
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьВозможностьЗаписиСНеПринятымиПозициями(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаданияНаЗакупкуКабельныеЛинии.НомерСтроки КАК НомерСтроки,
	               |	ЗаданияНаЗакупкуКабельныеЛинии.Комментарий КАК Комментарий
	               |ИЗ
	               |	Документ.ЗаданияНаЗакупку.КабельныеЛинии КАК ЗаданияНаЗакупкуКабельныеЛинии
	               |ГДЕ
	               |	ЗаданияНаЗакупкуКабельныеЛинии.Ссылка = &Ссылка
	               |	И НЕ ЗаданияНаЗакупкуКабельныеЛинии.Принято
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл		
		Если СокрЛП(Выборка.Комментарий) = "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Необходимо комментировать отмену позиции %1", Выборка.НомерСтроки),,,, Отказ);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоАннулирование()

	Возврат СтатусДокумента = Перечисления.СтатусыЗаданийНаЗакупку.Аннулировано;
	
КонецФункции

Процедура ЗаписатьКабельныеЛинииВПринятые()   

	УдалитьУдаленныеКабельныеИзТЧ();
	
	УстановитьПривилегированныйРежим(Истина);		
	Для Каждого ТекСтрокаКабельныхЛиний Из КабельныеЛинии Цикл
		МенеджерЗаписи = РегистрыСведений.ЗаданияНаЗакупкиПринятыеКабельныеЛинии.СоздатьМенеджерЗаписи();   
		МенеджерЗаписи.КабельняЛиния = ТекСтрокаКабельныхЛиний.КабельнаяЛиния;
		МенеджерЗаписи.Записать();
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УдалитьКабельныеЛинииИзПринятых()   
	
	УдалитьУдаленныеКабельныеИзТЧ();
	
	УстановитьПривилегированныйРежим(Истина);	
	Для Каждого ТекСтрокаКабельныхЛиний Из КабельныеЛинии Цикл
		МенеджерЗаписи = РегистрыСведений.ЗаданияНаЗакупкиПринятыеКабельныеЛинии.СоздатьМенеджерЗаписи();   
		МенеджерЗаписи.КабельняЛиния = ТекСтрокаКабельныхЛиний.КабельнаяЛиния;
		МенеджерЗаписи.Удалить();
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УдалитьУдаленныеКабельныеИзТЧ()

	УстановитьПривилегированныйРежим(Истина);	
	СписокУдаляемыхКЛ = ОбщегоНазначенияПереопределяемый.СписокУдаляемыхСтрокКабельныеЛинии(Ссылка, КабельныеЛинии);
	Для Каждого УдаляемыйКабель Из СписокУдаляемыхКЛ Цикл   
		МенеджерЗаписи = РегистрыСведений.ЗаданияНаЗакупкиПринятыеКабельныеЛинии.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КабельняЛиния = УдаляемыйКабель;
		МенеджерЗаписи.Удалить();				
	КонецЦикла;

КонецПроцедуры	

Процедура ЗафиксироватьСтатусДокумента() 
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписи = РегистрыСведений.ЗаданияНаЗакупкиСтатусы.СоздатьНаборЗаписей();
	НаборЗаписи.Отбор.Регистратор.Установить(Ссылка);  
	Для Каждого ТекСтр Из КабельныеЛинии Цикл
		Запись                = НаборЗаписи.Добавить(); 
		Запись.КабельнаяЛиния = ТекСтр.КабельнаяЛиния; 
		Запись.Статус         = СтатусДокумента;
		Запись.Номер          = Номер;
		Запись.Дата           = Дата; 
	КонецЦикла;
	НаборЗаписи.Записать();
	
КонецПроцедуры	

Процедура УдалитьСтатусыДокументаИзУчета()    
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписи = РегистрыСведений.ЗаданияНаЗакупкиСтатусы.СоздатьНаборЗаписей();
	НаборЗаписи.Отбор.Регистратор.Установить(Ссылка);     
	НаборЗаписи.Записать();
	
КонецПроцедуры	

Функция ОпределитьСтатусКабельнойЛинии()    
	
	СтатусКабельнойЛинии = Неопределено;
	Если ПометкаУдаления Тогда   
		СтатусКабельнойЛинии = Перечисления.СтатусыКабельныхЛиний.ЗаданиеНаЗакупкуНеВыдано;
	ИначеЕсли СтатусДокумента = Перечисления.СтатусыЗаданийНаЗакупку.ВыданоПодрядчику Тогда   
		СтатусКабельнойЛинии = Перечисления.СтатусыКабельныхЛиний.ЗаданиеНаЗакупкуКППВОформлении;	     
	ИначеЕсли СтатусДокумента = Перечисления.СтатусыЗаданийНаЗакупку.Принято Тогда   
		СтатусКабельнойЛинии = Перечисления.СтатусыКабельныхЛиний.ВЗакупке;	     	
	КонецЕсли;	
	
	Возврат СтатусКабельнойЛинии;
	
КонецФункции	
#КонецОбласти
