 
#Область СобытияФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПодключаемыеКомандыПриСоздании();
		
	Объект.ЖурналУчетаКабельнойПродукции = ?(Параметры.Свойство("ЖурналУчетаКабели"), Параметры.ЖурналУчетаКабели, Неопределено);	 
	//Объект.ФайлКартинки                  = Объект.ЖурналУчетаКабельнойПродукции.ФайлКартинки;

	//ДобавитьКартинкуКабеля();

	Если Не Параметры.Свойство("ЖурналУчетаКабели") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьВременноеХранилище();
	
	ЗагрузитьДанныеВХранилище(Объект.ЖурналУчетаКабельнойПродукции, Объект.Подрядчик, АдресДанных);
			
КонецПроцедуры

&НаСервере
Процедура ПодключаемыеКомандыПриСоздании()

	ПараметрыРазмещения = Новый Структура;  
	ПараметрыРазмещения.Вставить("Источники", Новый ОписаниеТипов("СправочникСсылка.ЖурналыУчетаКабельнойПродукции"));
	ПараметрыРазмещения.Вставить("КоманднаяПанель", ЭтаФорма.КоманднаяПанель);
    ПараметрыРазмещения.Вставить("ПрефиксГрупп", "");	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКартинкуКабеля()

	//ПараметрыГиперссылки            = РаботаСФайлами.ГиперссылкаФайлов();
	//ПараметрыГиперссылки.Размещение = "КоманднаяПанель";	
	
	ПараметрыПоля                        = РаботаСФайлами.ПолеФайла();
	ПараметрыПоля.Размещение             = "ГруппаКартинка";
	ПараметрыПоля.ПутьКДанным            = "Объект.ФайлКартинки";	
	ПараметрыПоля.ПутьКДаннымИзображения = "АдресКартинки";
	
    ДобавляемыеЭлементы = Новый Массив;
	//ДобавляемыеЭлементы.Добавить(ПараметрыГиперссылки);
	ДобавляемыеЭлементы.Добавить(ПараметрыПоля);
	
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ДобавляемыеЭлементы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеДляФормы = ПолучитьДанныеИзХранилища(АдресДанных);
	
	Если ТипЗнч(ДанныеДляФормы) = Тип("Структура") Тогда
		ЗагрузитьДанныеВФорму(ДанныеДляФормы);		
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);	
	
	//РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВФорму(ДанныеДляФормы)

	Если ДанныеДляФормы.Свойство("ДанныеЖурналУчетаКабельнойПродукции") Тогда
		ДанныеЖурнала = ДанныеДляФормы.ДанныеЖурналУчетаКабельнойПродукции;
		Для каждого ТекДанные Из ДанныеЖурнала Цикл
			ЗаполнитьЗначенияСвойств(Объект, ТекДанные); 
		КонецЦикла;
	КонецЕсли;			
	
	Объект.ЗаданияНаМонтаж.Очистить();
	Если ДанныеДляФормы.Свойство("ДанныеЗаданияНаМонтаж") Тогда
		ДанныеЗаданияНаМонтаж = ДанныеДляФормы.ДанныеЗаданияНаМонтаж;
		Для каждого ТекДанные Из ДанныеЗаданияНаМонтаж Цикл    
			НовСтр = Объект.ЗаданияНаМонтаж.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекДанные); 
		КонецЦикла;		
	КонецЕсли;
	
	Если ДанныеДляФормы.Свойство("ДанныеПодрядчик") Тогда
		ДанныеПодрядчик = ДанныеДляФормы.ДанныеПодрядчик;
		Для каждого ТекДанные Из ДанныеПодрядчик Цикл
			ЗаполнитьЗначенияСвойств(Объект, ТекДанные); 
		КонецЦикла;		
	КонецЕсли;
	
	Объект.ЗаявкиНаЗакупку.Очистить();
	Если ДанныеДляФормы.Свойство("ДанныеЗаявкиНаЗакупки") Тогда
		ДанныеЗаявкиНаЗакупки = ДанныеДляФормы.ДанныеЗаявкиНаЗакупки;
		Для каждого ТекДанные Из ДанныеЗаявкиНаЗакупки Цикл    
			НовСтр = Объект.ЗаявкиНаЗакупку.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекДанные); 
		КонецЦикла;				
	КонецЕсли;
	
	Объект.МонтажныеРаботы.Очистить();
	Если ДанныеДляФормы.Свойство("ДанныеМонтажа") Тогда
		ДанныеМонтажа = ДанныеДляФормы.ДанныеМонтажа;
		Для каждого ТекДанные Из ДанныеМонтажа Цикл    
			НовСтр = Объект.МонтажныеРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекДанные); 
		КонецЦикла;						
	КонецЕсли;
	
	Объект.ЗаявкиНаПредъявлениеВыполненныхЭМР.Очистить();
	Если ДанныеДляФормы.Свойство("ДанныеЗаявкиСдачаРабот") Тогда
		ДанныеЗаявкиСдачаРабот = ДанныеДляФормы.ДанныеЗаявкиСдачаРабот;
		Для каждого ТекДанные Из ДанныеЗаявкиСдачаРабот Цикл    
			НовСтр = Объект.ЗаявкиНаПредъявлениеВыполненныхЭМР.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекДанные); 
		КонецЦикла;								
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность Тогда
		
		СтруктураДанныхЖурналКабели = ПолучитьСтруктуруДанныхЖурналКабели();
		
		Если ЗначениеЗаполнено(Объект.ЖурналУчетаКабельнойПродукции) Тогда
			ИзменитьЖурналУчетаКабели(СтруктураДанныхЖурналКабели, Объект.ЖурналУчетаКабельнойПродукции);
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		Оповестить();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	ОбновитьИнтерфейсПослеДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПослеДействий()
	
	ЗагрузитьДанныеВХранилище(Объект.ЖурналУчетаКабельнойПродукции, Объект.Подрядчик, АдресДанных);
	
	ДанныеДляФормы = ПолучитьДанныеИзХранилища(АдресДанных);
	
	Если ТипЗнч(ДанныеДляФормы) = Тип("Структура") Тогда
		ЗагрузитьДанныеВФорму(ДанныеДляФормы);		
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти


#Область СобытияКомандФормы
&НаКлиенте
Процедура ВыбратьПроект(Команда)
	
	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.Проект);		
	ДопПараметры         = Новый Структура("ИмяРеквизита", "Проект");
	
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКабельнаяЛиния(Команда)

	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.КабельнаяЛиния);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "КабельнаяЛиния");
	
	ОткрытьФорму("Справочник.КабельныеЛинии.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОткудаПомещение(Команда)

	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.ОткудаПомещение);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "ОткудаПомещение");
	
	ОткрытьФорму("Справочник.Помещения.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКудаПомещение(Команда)
	
	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.КудаПомещение);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "КудаПомещение");
	
	ОткрытьФорму("Справочник.Помещения.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОткудаОборудование(Команда)

	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.ОткудаОборудование);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "ОткудаОборудование");
	
	ОткрытьФорму("Справочник.ТипыОборудования.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));		

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКудаОборудование(Команда)

	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.КудаОборудование);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "КудаОборудование");
	
	ОткрытьФорму("Справочник.ТипыОборудования.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));			

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОткудаКоординаты(Команда)

	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.ОткудаКоординаты);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "ОткудаКоординаты");
	
	ОткрытьФорму("Справочник.Координаты.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));		

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКудаКоординаты(Команда)

	ПараметрыФормыВыбора = ПолучитьПараметрыФормыВыбора(Объект.КудаКоординаты);	
	ДопПараметры         = Новый Структура("ИмяРеквизита", "КудаКоординаты");
	
	ОткрытьФорму("Справочник.Координаты.ФормаВыбора", ПараметрыФормыВыбора, 
		ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект, ДопПараметры));		
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыВыбора(СсылкаТекСтрока)

	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.Независимый);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("ТекущаяСтрока",      СсылкаТекСтрока);
	
	Возврат ПараметрыФормыВыбора;
	
КонецФункции

&НаКлиенте
Процедура Далее(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ЖурналУчетаКабельнойПродукции) Тогда
		Возврат;	
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЖурналУчетаКабельнойПродукции Тогда

		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаданияНаМонтаж;  
		УстановитьВидимостьСтраниц(Элементы.ЗаданияНаМонтаж);
  	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаданияНаМонтаж Тогда

		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаявкиНаЗакупку;
		УстановитьВидимостьСтраниц(Элементы.ЗаявкиНаЗакупку);
  	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаявкиНаЗакупку Тогда

		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Монтаж;
		УстановитьВидимостьСтраниц(Элементы.Монтаж);
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Монтаж Тогда

		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СдачаРабот;
		УстановитьВидимостьСтраниц(Элементы.СдачаРабот);
	КонецЕсли;	
	
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СдачаРабот Тогда   
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Монтаж; 
		УстановитьВидимостьСтраниц(Элементы.Монтаж);		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Монтаж Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаявкиНаЗакупку;
		УстановитьВидимостьСтраниц(Элементы.ЗаявкиНаЗакупку);		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаявкиНаЗакупку Тогда   
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаданияНаМонтаж; 
		УстановитьВидимостьСтраниц(Элементы.ЗаданияНаМонтаж);		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаданияНаМонтаж Тогда 
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЖурналУчетаКабельнойПродукции; 
		УстановитьВидимостьСтраниц(Элементы.ЖурналУчетаКабельнойПродукции);		
	КонецЕсли;
	
	ГруппаСтраницыПриСменеСтраницы(Элементы.ГруппаСтраницы.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраниц(ТекущаяСтраница)
	
	Элементы.ЖурналУчетаКабельнойПродукции.Видимость = ТекущаяСтраница = Элементы.ЖурналУчетаКабельнойПродукции;		
	Элементы.ЗаданияНаМонтаж.Видимость               = ТекущаяСтраница = Элементы.ЗаданияНаМонтаж;
	Элементы.ЗаявкиНаЗакупку.Видимость               = ТекущаяСтраница = Элементы.ЗаявкиНаЗакупку;
    Элементы.Монтаж.Видимость                        = ТекущаяСтраница = Элементы.Монтаж;
	Элементы.СдачаРабот.Видимость                    = ТекущаяСтраница = Элементы.СдачаРабот;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(ТекущаяСтраница)
	
	ВсегоСтраниц       = 5;	
	ДобавочнаяСтраница = 1;
	
	Если ТекущаяСтраница = Элементы.ЖурналУчетаКабельнойПродукции Тогда
		
		НомерСтраницы = 1;	
	ИначеЕсли ТекущаяСтраница = Элементы.ЗаданияНаМонтаж Тогда
		
		НомерСтраницы = 1 + ДобавочнаяСтраница;	
	ИначеЕсли ТекущаяСтраница = Элементы.ЗаявкиНаЗакупку Тогда
		
		НомерСтраницы = 2 + ДобавочнаяСтраница;	
	ИначеЕсли ТекущаяСтраница = Элементы.Монтаж Тогда
		
		НомерСтраницы = 3 + ДобавочнаяСтраница;	
	ИначеЕсли ТекущаяСтраница = Элементы.СдачаРабот Тогда
		
		НомерСтраницы = 4 + ДобавочнаяСтраница;		
	КонецЕсли;	
	
	Элементы.ДекорацияКоличествоСтраниц.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Стр. %1 из %2 ", НомерСтраницы, ВсегоСтраниц);
	
	Элементы.ФормаНазад.Видимость = НомерСтраницы <> 1;
	Элементы.ФормаДалее.Видимость = НомерСтраницы <> 5;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлы(Команда)
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.ЖурналУчетаКабельнойПродукции);
	ОткрытьФорму("Справочник.ЖурналыУчетаКабельнойПродукцииПрисоединенныеФайлы.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры
#КонецОбласти


&НаКлиенте
Процедура ИзмОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	СохрнаитьИзмененияПолейФормы(Элемент, Текст);
	
КонецПроцедуры
    
&НаКлиенте
Процедура ДлинаПроектаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	СохрнаитьИзмененияПолейФормы(Элемент, Текст);

КонецПроцедуры

&НаКлиенте
Процедура НомерППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	СохрнаитьИзмененияПолейФормы(Элемент, Текст, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НомерВКОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	СохрнаитьИзмененияПолейФормы(Элемент, Текст, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьМонтажПриИзменении(Элемент)

	СтруктураДанныхЖурналКабели = ПолучитьСтруктуруДанныхЖурналКабели();
	
	Если ЗначениеЗаполнено(Объект.ЖурналУчетаКабельнойПродукции) Тогда
		ИзменитьЖурналУчетаКабели(СтруктураДанныхЖурналКабели, Объект.ЖурналУчетаКабельнойПродукции);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохрнаитьИзмененияПолейФормы(Элемент, Текст, Число=Истина)

	СтруктураДанныхЖурналКабели              = ПолучитьСтруктуруДанныхЖурналКабели();
	СтруктураДанныхЖурналКабели[Элемент.Имя] = ?(Число, Число(Текст), Текст);
	
	Если ЗначениеЗаполнено(Объект.ЖурналУчетаКабельнойПродукции) Тогда
		ИзменитьЖурналУчетаКабели(СтруктураДанныхЖурналКабели, Объект.ЖурналУчетаКабельнойПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда		
		Если ДополнительныеПараметры.Свойство("ИмяРеквизита") Тогда
			Объект[ДополнительныеПараметры.ИмяРеквизита] = Результат;			
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураДанныхЖурналКабели = ПолучитьСтруктуруДанныхЖурналКабели();
	
	Если ЗначениеЗаполнено(Объект.ЖурналУчетаКабельнойПродукции) Тогда
		ИзменитьЖурналУчетаКабели(СтруктураДанныхЖурналКабели, Объект.ЖурналУчетаКабельнойПродукции);
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "КабельнаяЛиния" Тогда
		Объект.ЖурналУчетаКабельнойПродукции = СоздатьЖурналУчетаКабели(СтруктураДанныхЖурналКабели);   
		Объект.Ссылка                        = Объект.ЖурналУчетаКабельнойПродукции;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьСтруктуруДанныхЖурналКабели()

	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("Проект",             Объект.Проект);
	СтруктураДанных.Вставить("КабельнаяЛиния",     Объект.КабельнаяЛиния);
	СтруктураДанных.Вставить("Изм",                Объект.Изм);
	СтруктураДанных.Вставить("ОткудаПомещение",    Объект.ОткудаПомещение);
	СтруктураДанных.Вставить("ОткудаОборудование", Объект.ОткудаОборудование);
	СтруктураДанных.Вставить("ОткудаКоординаты", Объект.ОткудаКоординаты);
	СтруктураДанных.Вставить("КудаПомещение",    Объект.КудаПомещение);
	СтруктураДанных.Вставить("КудаОборудование", Объект.КудаОборудование);
	СтруктураДанных.Вставить("КудаКоординаты",   Объект.КудаКоординаты);
	СтруктураДанных.Вставить("ДлинаПроекта",     Объект.ДлинаПроекта);
	СтруктураДанных.Вставить("Код",              Объект.НомерПП);
	СтруктураДанных.Вставить("НомерВК",          Объект.НомерВК);
	СтруктураДанных.Вставить("РазрешитьМонтаж",  Объект.РазрешитьМонтаж);
	СтруктураДанных.Вставить("ФайлКартинки",     Объект.ФайлКартинки);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьЖурналУчетаКабели(ДанныеЖурнала, СсылкаЖурнал)
	
	ОбъектЖурнал = СсылкаЖурнал.ПолучитьОбъект();
		
	Для каждого ТекРеквизит Из ДанныеЖурнала Цикл		
		ОбъектЖурнал[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
	КонецЦикла;
	
	ОбъектЖурнал.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЖурналУчетаКабели(ДанныеЖурнала)
	
	ОбъектЖурнал = Справочники.ЖурналыУчетаКабельнойПродукции.СоздатьЭлемент();	
	
	Для каждого ТекРеквизит Из ДанныеЖурнала Цикл   		
		ОбъектЖурнал[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
	КонецЦикла;
	
	ОбъектЖурнал.Записать();
	
	Возврат ОбъектЖурнал.Ссылка;
	
КонецФункции


#Область СобытияТабличныхЧастей  
&НаКлиенте
Процедура ЗаданияНаМонтаж1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Задание);
	
	ОткрытьФорму("Документ.ЗаданияНаМонтаж.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданиеНаМонтаж(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаданиеНеЗадвоено() Тогда		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();	
	ПараметрыФормы.Вставить("ЖурналУчетаКабельнойПродукции", Объект.ЖурналУчетаКабельнойПродукции); 
	
	ОткрытьФорму("Документ.ЗаданияНаМонтаж.Форма.ФормаДокумента",ПараметрыФормы, ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаданиеНеЗадвоено()

	СтрокиЗадания = Объект.ЗаданияНаМонтаж.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));		
	Если СтрокиЗадания.Количество() = 0 Тогда   
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Задание уже создано, нельзя дублировать!");				
		Возврат Ложь;
	КонецЕсли;		
	
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаявкуНаЗакупку(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЕстьСозданноеЗаданиеНаЗакупкуЗаявкаНеЗадвоена() Тогда		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();	
	ПараметрыФормы.Вставить("ЖурналУчетаКабельнойПродукции", Объект.ЖурналУчетаКабельнойПродукции); 
	ПараметрыФормы.Вставить("Подрядчик",                     Объект.Подрядчик); 
	ПараметрыФормы.Вставить("ЭтоРабочееМесто",               Истина);
	
	ОткрытьФорму("Документ.ЗаявкиНаЗакупки.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьСозданноеЗаданиеНаЗакупкуЗаявкаНеЗадвоена()

	СтрокиЗаявки = Объект.ЗаявкиНаЗакупку.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));	
	
	Если СтрокиЗаявки.Количество() = 0 Тогда   
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка уже создана, нельзя дублировать!");				
		Возврат Ложь;
	КонецЕсли;	
	
	СтрокиЗаданий = Объект.ЗаданияНаМонтаж.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));	
	
	Если СтрокиЗаданий.Количество() > 0 И СтрокиЗаданий[0].Статус = Перечисления.СтатусыЗаданийНаЗакупку.Создано Тогда    
	Иначе   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет задания в статусе ""Создан""!");		
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура ЗаявкиНаЗакупку1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Заявка); 
	
	ОткрытьФорму("Документ.ЗаявкиНаЗакупки.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМонтаж(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЕстьВыполненнаяЗаявкаНаЗакупкуМонтажНеЗадвоен() Тогда		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();	
	ПараметрыФормы.Вставить("ЖурналУчетаКабельнойПродукции", Объект.ЖурналУчетаКабельнойПродукции); 
	ПараметрыФормы.Вставить("Подрядчик",                     Объект.Подрядчик);  
	ПараметрыФормы.Вставить("ЭтоРабочееМесто",               Истина);
	
	ОткрытьФорму("Документ.МонтажКабельнойПродукции.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьВыполненнаяЗаявкаНаЗакупкуМонтажНеЗадвоен()

	СтрокиМонтаж = Объект.МонтажныеРаботы.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));		
	Если СтрокиМонтаж.Количество() = 0 Тогда   
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Монтаж уже создан, нельзя дублировать!");				
		Возврат Ложь;
	КонецЕсли;	
	
	СтрокиЗаявок = Объект.ЗаявкиНаЗакупку.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));		
	Если СтрокиЗаявок.Количество() > 0 И СтрокиЗаявок[0].Заявка.Статус = Перечисления.СтатусыЗаявок.Выполнена Тогда    
	Иначе   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет заявки в статусе ""Выполнена""!");		
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура МонтажныеРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Монтаж); 
	
	ОткрытьФорму("Документ.МонтажКабельнойПродукции.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаПредъявлениеВыполненныхЭМР(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЕстьВыполненныйМонтажЗаявкаНеЗадвоена() Тогда		
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();	
	ПараметрыФормы.Вставить("ЖурналУчетаКабельнойПродукции", Объект.ЖурналУчетаКабельнойПродукции); 
	ПараметрыФормы.Вставить("Подрядчик",                     Объект.Подрядчик); 
	ПараметрыФормы.Вставить("ЭтоРабочееМесто",               Истина);
	
	ОткрытьФорму("Документ.ЗаявкиНаПредъявлениеВыполненныхЭМР.ФормаОбъекта", ПараметрыФормы,ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЕстьВыполненныйМонтажЗаявкаНеЗадвоена()

	СтрокиЗаявки = Объект.ЗаявкиНаПредъявлениеВыполненныхЭМР.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));		
	Если СтрокиЗаявки.Количество() = 0 Тогда   
	Иначе	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка уже создана, нельзя дублировать!");				
		Возврат Ложь;
	КонецЕсли;	
	
	СтрокиМонтаж = Объект.МонтажныеРаботы.Выгрузить(Новый Структура("ПометкаУдаления", Ложь));		
	Если СтрокиМонтаж.Количество() > 0 И СтрокиМонтаж[0].Монтаж.Статус = Перечисления.СтатусыМонтажа.Выполнен Тогда    
	Иначе   
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нет монтажа в статусе ""Выполнен""!");		
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина; 
	
КонецФункции

&НаКлиенте
Процедура ЗаявкиНаПредъявлениеВыполненныхЭМРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Заявка);
	
	ОткрытьФорму("Документ.ЗаявкиНаПредъявлениеВыполненныхЭМР.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаМонтаж1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.Задание); 
	
	ОткрытьФорму("Документ.ЗаявкиНаЗакупки.ФормаОбъекта",ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

#Область ПометкаУдаленияДокументов
&НаКлиенте
Процедура УдалитьЗаданиеНаМонтаж(Команда)
		
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ЗаданияНаМонтаж1.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументСсылка                = ТекущиеДанные.Задание;
	ТекущиеДанные.ПометкаУдаления = ВыполнитьПометкуУдаленияДокумента(ДокументСсылка);	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявкуНаЗакупку(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ЗаявкиНаЗакупку1.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументСсылка                = ТекущиеДанные.Заявка;	
	ТекущиеДанные.ПометкаУдаления = ВыполнитьПометкуУдаленияДокумента(ДокументСсылка);	
	
КонецПроцедуры  

&НаКлиенте
Процедура УдалитьМонтажнуюРаботу(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.МонтажныеРаботы.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументСсылка                = ТекущиеДанные.Монтаж;	
	ТекущиеДанные.ПометкаУдаления = ВыполнитьПометкуУдаленияДокумента(ДокументСсылка);	

КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявкуНаПредъявлениеВыполненныхЭМР(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ЗаявкиНаПредъявлениеВыполненныхЭМР.ТекущиеДанные;	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДокументСсылка                = ТекущиеДанные.Заявка;	
	ТекущиеДанные.ПометкаУдаления = ВыполнитьПометкуУдаленияДокумента(ДокументСсылка);	
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПометкуУдаленияДокумента(ДокументСсылка)
	
	Если НельзяУдалитьЕстьСвязанныеДокументы1(ДокументСсылка) Тогда     
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Есть связанные документы, нельзя удалить текущий документ!");
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат ПометитьНаУдалениеДокументНаСервере(ДокументСсылка);
	
КонецФункции

&НаКлиенте
Функция НельзяУдалитьЕстьСвязанныеДокументы1(ДокументСсылка)
	
	ПроведенныеЗаявкиНаЗакупку      = Объект.ЗаявкиНаЗакупку.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
	ПроведенныеМонтажи              = Объект.МонтажныеРаботы.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
	ПроведенныеЗаявкиНаПредъявление = Объект.ЗаявкиНаПредъявлениеВыполненныхЭМР.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаданияНаМонтаж") Тогда
		
		Возврат ПроведенныеЗаявкиНаЗакупку.Количество() > 0 ИЛИ ПроведенныеМонтажи.Количество() > 0
			ИЛИ ПроведенныеЗаявкиНаПредъявление.Количество() > 0;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаявкиНаЗакупки") тогда
		
		Возврат ПроведенныеМонтажи.Количество() > 0
			ИЛИ ПроведенныеЗаявкиНаПредъявление.Количество() > 0;
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.МонтажКабельнойПродукции") тогда
		
		Возврат ПроведенныеЗаявкиНаПредъявление.Количество() > 0;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПометитьНаУдалениеДокументНаСервере(ДокументСсылка) 
		
	ДокОбъект = ДокументСсылка.ПолучитьОбъект();	
	ДокОбъект.УстановитьПометкуУдаления(Истина);
	
	Возврат Истина;
	
КонецФункции
#КонецОбласти
#КонецОбласти


#Область ХранилищеДанныхФормы
&НаСервере
Процедура ИнициализироватьВременноеХранилище()

	АдресДанных = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗагрузитьДанныеВХранилище(СсылкаЖурналУчета, Подрядчик, АдресДанных)
	
	Если ЗначениеЗаполнено(СсылкаЖурналУчета) Тогда

		Данные = Новый Структура();	
		Данные.Вставить("ДанныеЖурналУчетаКабельнойПродукции", ЗагрузитьЖурналУчетаКабельнойЛинии(СсылкаЖурналУчета)); 
		Данные.Вставить("ДанныеЗаданияНаМонтаж",               ЗагрузитьЗаданияНаМонтаж(СсылкаЖурналУчета, Подрядчик));
		Данные.Вставить("ДанныеПодрядчик",                     ПрочитатьПодрядчикаПоЗаданиям(СсылкаЖурналУчета));    
		Данные.Вставить("ДанныеЗаявкиНаЗакупки",               ЗагрузитьЗаявкиНаЗакупки(СсылкаЖурналУчета));
		Данные.Вставить("ДанныеМонтажа",                       ЗагрузитьМонтаж(СсылкаЖурналУчета));
		Данные.Вставить("ДанныеЗаявкиСдачаРабот",              ЗагрузитьЗаявкиЗаявкиНаПредъявлениеВыполненныхЭМР(СсылкаЖурналУчета));
	Иначе
		
		Данные = Неопределено;	
	КонецЕсли;  
		
	ПоместитьВоВременноеХранилище(Данные, АдресДанных); 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьЖурналУчетаКабельнойЛинии(СсылкаЖурналУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖурналыУчетаКабельнойПродукции.Проект КАК Проект,
	               |	ЖурналыУчетаКабельнойПродукции.КабельнаяЛиния КАК КабельнаяЛиния,
	               |	ЖурналыУчетаКабельнойПродукции.Изм КАК Изм,
	               |	ЖурналыУчетаКабельнойПродукции.ОткудаПомещение КАК ОткудаПомещение,
	               |	ЖурналыУчетаКабельнойПродукции.ОткудаОборудование КАК ОткудаОборудование,
	               |	ЖурналыУчетаКабельнойПродукции.ОткудаКоординаты КАК ОткудаКоординаты,
	               |	ЖурналыУчетаКабельнойПродукции.КудаПомещение КАК КудаПомещение,
	               |	ЖурналыУчетаКабельнойПродукции.КудаОборудование КАК КудаОборудование,
	               |	ЖурналыУчетаКабельнойПродукции.КудаКоординаты КАК КудаКоординаты,
	               |	ЖурналыУчетаКабельнойПродукции.ДлинаПроекта КАК ДлинаПроекта,
	               |	ЖурналыУчетаКабельнойПродукции.Код КАК НомерПП,
	               |	ЖурналыУчетаКабельнойПродукции.НомерВК КАК НомерВК,
	               |	ЖурналыУчетаКабельнойПродукции.РазрешитьМонтаж КАК РазрешитьМонтаж,
	               |	ЖурналыУчетаКабельнойПродукции.ФайлКартинки КАК ФайлКартинки,
	               |	ЖурналыУчетаКабельнойПродукции.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЖурналыУчетаКабельнойПродукции КАК ЖурналыУчетаКабельнойПродукции
	               |ГДЕ
	               |	ЖурналыУчетаКабельнойПродукции.Ссылка = &Ссылка";  
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаЖурналУчета); 
	
	Результат = Запрос.Выполнить();	

	Возврат СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(Результат);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьЗаданияНаМонтаж(СсылкаЖурналУчета, Подрядчик)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеПоЗаданиямПоПрокладкеКабелейСрезПоследних.Статус КАК Статус,
	               |	ДанныеПоЗаданиямПоПрокладкеКабелейСрезПоследних.ЖурналУчетаКабельнойЛинии КАК ЖурналУчетаКабельнойЛинии
	               |ПОМЕСТИТЬ ВТ_Статусы
	               |ИЗ
	               |	РегистрСведений.ДанныеПоЗаданиямПоПрокладкеКабелей.СрезПоследних(
	               |			,
	               |			ЖурналУчетаКабельнойЛинии = &ЖурналУчетаКабельнойПродукции
	               |				И Подрядчик = &Подрядчик) КАК ДанныеПоЗаданиямПоПрокладкеКабелейСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаданияНаМонтаж.Ссылка КАК Задание,
	               |	ЗаданияНаМонтаж.ПометкаУдаления КАК ПометкаУдаления,
	               |	ЕСТЬNULL(ВТ_Статусы.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Создано)) КАК Статус,
	               |	ЗаданияНаМонтаж.Подрядчик КАК Подрядчик
	               |ИЗ
	               |	Документ.ЗаданияНаМонтаж КАК ЗаданияНаМонтаж
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Статусы КАК ВТ_Статусы
	               |		ПО ЗаданияНаМонтаж.ЖурналУчетаКабельнойПродукции = ВТ_Статусы.ЖурналУчетаКабельнойЛинии
	               |ГДЕ
	               |	ЗаданияНаМонтаж.ЖурналУчетаКабельнойПродукции = &ЖурналУчетаКабельнойПродукции";  
	
	Запрос.УстановитьПараметр("ЖурналУчетаКабельнойПродукции", СсылкаЖурналУчета);
	Запрос.УстановитьПараметр("Подрядчик",                     Подрядчик);
	
	Результат = Запрос.Выполнить();	

	Возврат СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьПодрядчикаПоЗаданиям(СсылкаЖурналУчета)

	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеПоЗаданиямПоПрокладкеКабелейСрезПоследних.Подрядчик КАК Подрядчик
	               |ИЗ
	               |	РегистрСведений.ДанныеПоЗаданиямПоПрокладкеКабелей.СрезПоследних(
	               |			,
	               |			ЖурналУчетаКабельнойЛинии = &ЖурналУчетаКабельнойПродукции
	               |				И Регистратор ССЫЛКА Документ.ЗаданияНаМонтаж) КАК ДанныеПоЗаданиямПоПрокладкеКабелейСрезПоследних";  
	
	Запрос.УстановитьПараметр("ЖурналУчетаКабельнойПродукции", СсылкаЖурналУчета);
	
	Результат = Запрос.Выполнить();	

	Возврат СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьЗаявкиНаЗакупки(СсылкаЖурналУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкиНаЗакупки.Ссылка КАК Заявка,
	               |	ЗаявкиНаЗакупки.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Документ.ЗаявкиНаЗакупки КАК ЗаявкиНаЗакупки
	               |ГДЕ
	               |	ЗаявкиНаЗакупки.ЖурналУчетаКабельнойПродукции = &ЖурналУчетаКабельнойПродукции";  
	
	Запрос.УстановитьПараметр("ЖурналУчетаКабельнойПродукции", СсылкаЖурналУчета);
	
	Результат = Запрос.Выполнить();	
	
	ВыборкаДанных = Результат.Выбрать();

	Возврат СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьМонтаж(СсылкаЖурналУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МонтажКабельнойПродукции.Ссылка КАК Монтаж,
	               |	МонтажКабельнойПродукции.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Документ.МонтажКабельнойПродукции КАК МонтажКабельнойПродукции
	               |ГДЕ
	               |	МонтажКабельнойПродукции.ЖурналУчетаКабельнойПродукции = &ЖурналУчетаКабельнойПродукции";  
	
	Запрос.УстановитьПараметр("ЖурналУчетаКабельнойПродукции", СсылкаЖурналУчета);
	
	Результат = Запрос.Выполнить();	

	Возврат СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьЗаявкиЗаявкиНаПредъявлениеВыполненныхЭМР(СсылкаЖурналУчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос       = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкиНаПредъявлениеВыполненныхЭМР.Ссылка КАК Заявка,
	               |	ЗаявкиНаПредъявлениеВыполненныхЭМР.ПометкаУдаления КАК ПометкаУдаления
	               |ИЗ
	               |	Документ.ЗаявкиНаПредъявлениеВыполненныхЭМР КАК ЗаявкиНаПредъявлениеВыполненныхЭМР
	               |ГДЕ
	               |	ЗаявкиНаПредъявлениеВыполненныхЭМР.ЖурналУчетаКабельнойПродукции = &ЖурналУчетаКабельнойПродукции";  
	
	Запрос.УстановитьПараметр("ЖурналУчетаКабельнойПродукции", СсылкаЖурналУчета);
	
	Результат = Запрос.Выполнить();
	
	Возврат СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(Результат);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеИзХранилища(АдресДанных)
	
	Если Не ЭтоАдресВременногоХранилища(АдресДанных) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(АдресДанных);	
	Возврат Данные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПолейПоРезультатуЗапроса(Результат)

	СписокПолей = "";
	Для каждого Колонка Из Результат.Колонки Цикл
		СписокПолей = СписокПолей + ?(СписокПолей <> "", ",", "") + Колонка.Имя;	
	КонецЦикла;
	
	Возврат СписокПолей;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеЗаполненияФормыИзВыборкиЗапроса(РезультатЗапроса)
	
	МассивДанных = Новый Массив;		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивДанных;	
	КонецЕсли;
	
	ВыборкаДанных = РезультатЗапроса.Выбрать();	
	
	СписокПолей   = ПолучитьСписокПолейПоРезультатуЗапроса(РезультатЗапроса);
	
	Пока ВыборкаДанных.Следующий() Цикл
		
		Данные = Новый Структура(СписокПолей);
				
		ЗаполнитьЗначенияСвойств(Данные, ВыборкаДанных); 		
		МассивДанных.Добавить(Данные);
	КонецЦикла;
	
	Возврат МассивДанных
	
КонецФункции
#КонецОбласти


#Область ПодключаемыеКомандыБСП 
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)    
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект.ЖурналУчетаКабельнойПродукции);  
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры)

	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);	
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)   
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект.ЖурналУчетаКабельнойПродукции); 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()   
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект.ЖурналУчетаКабельнойПродукции);   
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)   
	
	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);   
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)   
	
	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);   
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)   
	
	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);   
	
КонецПроцедуры  

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)   
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);   
	
КонецПроцедуры  
#КонецОбласти




