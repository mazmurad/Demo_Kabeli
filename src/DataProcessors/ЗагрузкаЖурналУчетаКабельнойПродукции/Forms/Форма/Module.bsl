#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Не Параметры.Свойство("АдресДвоичныхДанных") Или Не Параметры.Свойство("РасширениеФайла") Тогда
		Возврат;
	КонецЕсли;

	ЗагрузитьДанныеФайлаВТабличныйДокумент(Параметры.АдресДвоичныхДанных, Параметры.РасширениеФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Оповестить();

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ОтменитьЗагрузку(Команда)

	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)

	ДанныеИзТабличногоДокумента = ПрочитатьТабличныйДокументСДанными();

	ОбработатьСсылочныеПоля(ДанныеИзТабличногоДокумента);

	Закрыть();

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ПрочитатьТабличныйДокументСДанными()
	// Собрать данные файла в массив структуры
	ТабДок = Объект.ДанныеИзФайлаЭксель;

	МассивДанных    = Новый Массив;
	КоличествоСтрок = ТабДок.ВысотаТаблицы;

	ИменаПолейИИхКоординаты = ПолучитьСоответствиеИменаПолейКоординаты();
	КоличествоКолонок       = ИменаПолейИИхКоординаты.Количество();
	
	// Обход строк файла и загрузка строк в массив
	Для R = 2 По КоличествоСтрок Цикл

		СтрокаДанных = Новый Структура(ПолучитьИменаПолей() + "," + ДополнительныеПоля());
		Для C = 1 По КоличествоКолонок Цикл

			Попытка

				КоординтыПоля = "Rx" + "C" + C;
				ИмяПоля       = ИменаПолейИИхКоординаты.Получить(КоординтыПоля);
				ИмяОбласти    = СтрЗаменить(КоординтыПоля, "x", Формат(R, "ЧГ=0;"));

				ТекстЯчейки           = Строка(ТабДок.ПолучитьОбласть(ИмяОбласти).ТекущаяОбласть.Текст);
				СтрокаДанных[ИмяПоля] = ТекстЯчейки;
			Исключение

				ТекстОшибки = ОписаниеОшибки();
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Новый Массив;
			КонецПопытки;

		КонецЦикла;
		МассивДанных.Добавить(СтрокаДанных);

	КонецЦикла;

	Возврат МассивДанных;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИменаПолейКоординаты()

	ИменаПолейКоординаты = Новый Соответствие;
	ИменаПолейКоординаты.Вставить("RxC1", "НомерПП");
	ИменаПолейКоординаты.Вставить("RxC2", "НомерПроекта");
	ИменаПолейКоординаты.Вставить("RxC3", "АрхивныйНомер");
	ИменаПолейКоординаты.Вставить("RxC4", "Объект");
	ИменаПолейКоординаты.Вставить("RxC5", "Изм");
	ИменаПолейКоординаты.Вставить("RxC6", "НомерНитки");
	ИменаПолейКоординаты.Вставить("RxC7", "МаркировкаКабеля");
	ИменаПолейКоординаты.Вставить("RxC8", "МаркировкаКабеляПроектная");
	ИменаПолейКоординаты.Вставить("RxC9", "СечениеПроектное");
	ИменаПолейКоординаты.Вставить("RxC10", "КлассБезопасности");
	ИменаПолейКоординаты.Вставить("RxC11", "ОткудаПомещение");
	ИменаПолейКоординаты.Вставить("RxC12", "ОткудаОборудование");
	ИменаПолейКоординаты.Вставить("RxC13", "X");
	ИменаПолейКоординаты.Вставить("RxC14", "Y");
	ИменаПолейКоординаты.Вставить("RxC15", "Z");
	ИменаПолейКоординаты.Вставить("RxC16", "КудаПомещение");
	ИменаПолейКоординаты.Вставить("RxC17", "КудаОборудование");
	ИменаПолейКоординаты.Вставить("RxC18", "X1");
	ИменаПолейКоординаты.Вставить("RxC19", "Y1");
	ИменаПолейКоординаты.Вставить("RxC20", "Z1");
	ИменаПолейКоординаты.Вставить("RxC21", "Длина");

	Возврат ИменаПолейКоординаты;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИменаПолей()

	ИменаПолейИИхКоординаты = ПолучитьСоответствиеИменаПолейКоординаты();

	ИменаПолей = "";
	Для Каждого ТекПолеКоординат Из ИменаПолейИИхКоординаты Цикл
		ИменаПолей = ИменаПолей + ?(ИменаПолей <> "", ",", "") + ТекПолеКоординат.Значение;
	КонецЦикла;

	Возврат ИменаПолей;

КонецФункции

&НаСервереБезКонтекста
Функция ДополнительныеПоля()
	
	Возврат "Проект, КабельнаяЛиния, ОткудаКоординаты, КудаКоординаты";
	
КонецФункции	

&НаСервереБезКонтекста
Процедура ОбработатьСсылочныеПоля(МассивДанныхТабДок)

	ТаблицаДанныхКЖ = ПреобразоватьМассивВТаблицуЗначений(МассивДанныхТабДок);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КабельныеЖурналы", ТаблицаДанныхКЖ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КабельныеЖурналы.НомерПроекта Как Строка(299)) Как НомерПроекта,
	|	КабельныеЖурналы.АрхивныйНомер,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.МаркировкаКабеля Как Строка(199)) КАК МаркировкаКабеля,
	|	КабельныеЖурналы.НомерНитки,
	|	КабельныеЖурналы.МаркировкаКабеляПроектная,
	|	КабельныеЖурналы.КлассБезопасности,
	|	КабельныеЖурналы.СечениеПроектное,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.X Как Строка(10)) КАК X,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Y Как Строка(10)) КАК Y,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Z Как Строка(10)) КАК Z,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.X1 Как Строка(10)) КАК X1,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Y1 Как Строка(10)) КАК Y1,
	|	ВЫРАЗИТЬ(КабельныеЖурналы.Z1 Как Строка(10)) КАК Z1
	|ПОМЕСТИТЬ КабельныеЖурналы
	|ИЗ
	|	&КабельныеЖурналы КАК КабельныеЖурналы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КабельныеЖурналы.НомерПроекта,
	|	КабельныеЖурналы.АрхивныйНомер,
	|	Проекты.Ссылка КАК Проект,
	|	КабельныеЛинии.Ссылка КАК КабельнаяЛиния,
	|	КабельныеЖурналы.МаркировкаКабеля,
	|	КабельныеЖурналы.НомерНитки,
	|	КабельныеЖурналы.МаркировкаКабеляПроектная,
	|	КабельныеЖурналы.КлассБезопасности,
	|	КабельныеЖурналы.СечениеПроектное,
	|	КабельныеЖурналы.X,
	|	КабельныеЖурналы.Y,
	|	КабельныеЖурналы.Z,
	|	КабельныеЖурналы.X1,
	|	КабельныеЖурналы.Y1,
	|	КабельныеЖурналы.Z1,
	|	(КабельныеЖурналы.X + ВЫРАЗИТЬ(""/"" Как Строка(1)) + КабельныеЖурналы.Y + ВЫРАЗИТЬ(""/"" Как Строка(1)) +
	|		КабельныеЖурналы.Z) КАК НаименованиеОткудаКоординаты,
	|	КабельныеЖурналы.X1 + ВЫРАЗИТЬ(""/"" КАК СТРОКА(1)) + КабельныеЖурналы.Y1 + ВЫРАЗИТЬ(""/"" КАК СТРОКА(1)) +
	|		КабельныеЖурналы.Z1 КАК НаименованиеКудаКоординаты
	|ИЗ
	|	КабельныеЖурналы КАК КабельныеЖурналы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО КабельныеЖурналы.НомерПроекта = Проекты.НомерПроекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КабельныеЛинии КАК КабельныеЛинии
	|		ПО КабельныеЖурналы.МаркировкаКабеля = КабельныеЛинии.Наименование";


	//СоздатьЖурналыУчетаКабельнойПродукции(МассивДанныхТабДок);

	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл

		Проект         = ПроектПолучитьСоздать(ВыборкаДанных);
		КабельнаяЛиния = КабельнаяЛинияПолучитьСоздать(ВыборкаДанных);
		Координаты     = КоординатыПолучитьСоздать(ВыборкаДанных);

		Для Каждого СтрокаДанных Из МассивДанныхТабДок Цикл
			
			Если СтрокаДанных.НомерПроекта = СокрЛП(ВыборкаДанных.НомерПроекта) Тогда
				СтрокаДанных.Вставить("Проект", Проект);	
			КонецЕсли;
				
			Если СтрокаДанных.МаркировкаКабеля = СокрЛП(ВыборкаДанных.МаркировкаКабеля) Тогда
				СтрокаДанных.Вставить("КабельнаяЛиния", КабельнаяЛиния);	
			КонецЕсли;
							
			Если СтрокаДанных.X = СокрЛП(ВыборкаДанных.X) И СтрокаДанных.Y = СокрЛП(ВыборкаДанных.Y) 
				И СтрокаДанных.Z = СокрЛП(ВыборкаДанных.Z) И СтрокаДанных.X1 = СокрЛП(ВыборкаДанных.X1) 
					И СтрокаДанных.Y1 = СокрЛП(ВыборкаДанных.Y1) И СтрокаДанных.Z1 = СокрЛП(ВыборкаДанных.Z1) Тогда
				СтрокаДанных.Вставить("ОткудаКоординаты", Координаты.ОткудаКоординаты);	
				СтрокаДанных.Вставить("КудаКоординаты",   Координаты.КудаКоординаты);					
			КонецЕсли;
															
		КонецЦикла;	

	КонецЦикла;

	СоздатьЖурналыУчетаКабельнойПродукции(МассивДанныхТабДок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные)

	СтруктураКолонок = Новый Структура;
	
	Для Каждого ЭлементМассива Из мсДанные Цикл
		//Ввиду того что массив может попасться разноколоночны нужно проверять не только первую строку
		//А так же если типы отличаются в разных элементах массива нужно иметь возможность получить читабельную ТЗ
		Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			ТипЗначенияКолонки = ТипЗнч(ЗначениеСтруктуры.Значение);
			Если НЕ СтруктураКолонок.Свойство(ЗначениеСтруктуры.Ключ) Тогда
				МассивДопустимыеТипы = Новый Массив;
				МассивДопустимыеТипы.Добавить(ТипЗначенияКолонки);
				СтруктураКолонок.Вставить(ЗначениеСтруктуры.Ключ,МассивДопустимыеТипы);
			Иначе
				СодержитТип = СтруктураКолонок[ЗначениеСтруктуры.Ключ].Найти(ТипЗначенияКолонки);
				Если СодержитТип = Неопределено Тогда
					СтруктураКолонок[ЗначениеСтруктуры.Ключ].Добавить(ТипЗначенияКолонки)
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Создадим ТЗ
	тзДанные = Новый ТаблицаЗначений;
	
	//Добавим Колонки в тз
	Для Каждого Колонка Из СтруктураКолонок Цикл
		тзДанные.Колонки.Добавить(Колонка.Ключ,Новый ОписаниеТипов(Колонка.Значение));		
	КонецЦикла;
	
	//Теперь можно обработать нормально массив
	Для Каждого ЭлементМассива Из мсДанные Цикл
		СтрокаТЗ = тзДанные.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ,ЭлементМассива);
	КонецЦикла;
	
	Возврат тзДанные;

КонецФункции

&НаСервереБезКонтекста
Функция КабельнаяЛинияПолучитьСоздать(ТекСтрока)

	УстановитьПривилегированныйРежим(Истина);

	СсылкаКабельнаяЛиния = ТекСтрока.КабельнаяЛиния;

	Если Не ЗначениеЗаполнено(ТекСтрока.КабельнаяЛиния) Тогда

		КабельнаяЛиния              = Справочники.КабельныеЛинии.СоздатьЭлемент();
		КабельнаяЛиния.Наименование = ТекСтрока.МаркировкаКабеля;
		ЗаполнитьЗначенияСвойств(КабельнаяЛиния, ТекСтрока);
		
		КабельнаяЛиния.ОбменДанными.Загрузка = Истина;
		КабельнаяЛиния.Записать();

		СсылкаКабельнаяЛиния = КабельнаяЛиния.Ссылка;
	КонецЕсли;

	Возврат СсылкаКабельнаяЛиния;

КонецФункции

&НаСервереБезКонтекста
Функция КоординатыПолучитьСоздать(ТекСтрока)

	УстановитьПривилегированныйРежим(Истина);

	КоординатыОткудаКуда = Новый Структура("ОткудаКоординаты, КудаКоординаты", 
		Справочники.Координаты.ПустаяСсылка(), Справочники.Координаты.ПустаяСсылка());


	X = ТекСтрока.X;
	Y = ТекСтрока.Y;
	Z = ТекСтрока.Z;

	X1 = ТекСтрока.X1;
	Y1 = ТекСтрока.Y1;
	Z1 = ТекСтрока.Z1;

	КоординатыОткудаКуда.ОткудаКоординаты = Справочники.Координаты.НайтиПоНаименованию(
		СтрЗаменить(ТекСтрока.НаименованиеОткудаКоординаты, " ", ""));

	Если Не ЗначениеЗаполнено(КоординатыОткудаКуда.ОткудаКоординаты) Тогда

		Наименование = X + "/" + Y + "/" + Z;

		Если Не СтрЗаменить(Наименование, "//", "") = "" Тогда
	
			Координаты   = Справочники.Координаты.СоздатьЭлемент();
			Координаты.X = X;
			Координаты.Y = Y;
			Координаты.Z	 = Z;
			Координаты.Наименование = Наименование;
			
			Координаты.Записать();

			КоординатыОткудаКуда.ОткудаКоординаты = Координаты.Ссылка;
		КонецЕсли;
	КонецЕсли;

	КоординатыОткудаКуда.КудаКоординаты = Справочники.Координаты.НайтиПоНаименованию(
		СтрЗаменить(ТекСтрока.НаименованиеКудаКоординаты, " ", ""));

	Если Не ЗначениеЗаполнено(КоординатыОткудаКуда.КудаКоординаты) Тогда

		Наименование = X1 + "/" + Y1 + "/" + Z1;

		Если Не СтрЗаменить(Наименование, "//", "") = "" Тогда
	
			Координаты   = Справочники.Координаты.СоздатьЭлемент();
			Координаты.X = X1;
			Координаты.Y = Y1;
			Координаты.Z	 = Z1;
			Координаты.Наименование = Наименование;
			
			Координаты.Записать();

			КоординатыОткудаКуда.КудаКоординаты = Координаты.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат КоординатыОткудаКуда;

КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьЖурналыУчетаКабельнойПродукции(МассивДанныхКЖ)

	УстановитьПривилегированныйРежим(Истина);

	ТаблицаДанныхКЖ     = ПреобразоватьМассивВТаблицуЗначений(МассивДанныхКЖ);
	ТаблицаШапкаЖурнала = ТаблицаДанныхКЖ.Скопировать();
	ТаблицаШапкаЖурнала.Свернуть("Проект");

	Для Каждого СтрокаПроект Из ТаблицаШапкаЖурнала Цикл
		
		ЖурналУчетаКП = Справочники.ЖурналыУчетаКабельнойПродукции.НайтиПоРеквизиту("Проект", СтрокаПроект.Проект);
		Если НЕ ЗначениеЗаполнено(ЖурналУчетаКП) Тогда
			ЖурналУчетаКП = Справочники.ЖурналыУчетаКабельнойПродукции.СоздатьЭлемент();
		Иначе
			ЖурналУчетаКП = ЖурналУчетаКП.ПолучитьОбъект();	
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(ЖурналУчетаКП, СтрокаПроект);

		ДанныеКабельныеЛинии = ТаблицаДанныхКЖ.НайтиСтроки(Новый Структура("Проект", СтрокаПроект.Проект));
		ЖурналУчетаКП.КабельныеЛинии.Очистить();
		Для Каждого СтрокаКабельнаяЛиния Из ДанныеКабельныеЛинии Цикл
			НовСтр = ЖурналУчетаКП.КабельныеЛинии.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаКабельнаяЛиния);
		КонецЦикла;	

		ЖурналУчетаКП.Записать();
	
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналУчетаКП.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроектПолучитьСоздать(ТекСтрока)

	УстановитьПривилегированныйРежим(Истина);

	Если Не ЗначениеЗаполнено(ТекСтрока.Проект) Тогда

		Проект              = Справочники.Проекты.СоздатьЭлемент();
		Проект.Наименование = ТекСтрока.НомерПроекта;
		ЗаполнитьЗначенияСвойств(Проект, ТекСтрока);
		Проект.Наименование = "Проект № " + Проект.НомерПроекта;
		Проект.Записать();

		СсылкаПроект = Проект.Ссылка;
	Иначе

		СсылкаПроект = ТекСтрока.Проект;
	КонецЕсли;

	Возврат СсылкаПроект;

КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеФайлаВТабличныйДокумент(АдресДвоичныхДанных, РасширениеФайла)

	АдресВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	ДвоичныеДанные.Записать(АдресВременногоФайла);

	Объект.ДанныеИзФайлаЭксель.Прочитать(АдресВременногоФайла);

	УдалитьФайлы(АдресВременногоФайла);

КонецПроцедуры
#КонецОбласти