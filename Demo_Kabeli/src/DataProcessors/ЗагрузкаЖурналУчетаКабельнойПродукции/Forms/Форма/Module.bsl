
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("АдресДвоичныхДанных") Или Не Параметры.Свойство("РасширениеФайла") Тогда		
		Возврат;			
	КонецЕсли;
	
	ЗагрузитьДанныеФайлаВТабличныйДокумент(Параметры.АдресДвоичныхДанных, Параметры.РасширениеФайла);
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьДанныеФайлаВТабличныйДокумент(АдресДвоичныхДанных, РасширениеФайла)

	АдресВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
	ДвоичныеДанные.Записать(АдресВременногоФайла);
	
	Объект.ДанныеИзФайлаЭксель.Прочитать(АдресВременногоФайла);	
	
	УдалитьФайлы(АдресВременногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Оповестить();
	
КонецПроцедуры
#КонецОбласти


#Область ОбработкаКоманд

&НаКлиенте
Процедура ОтменитьЗагрузку(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ДанныеИзТабличногоДокумента = ПрочитатьТабличныйДокументСДанными();	
	
    ОбработатьСсылочныеПоля(ДанныеИзТабличногоДокумента);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьТабличныйДокументСДанными()
	
	ТабДок = Объект.ДанныеИзФайлаЭксель;
	
	МассивДанных    = Новый Массив;	
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	
	ИменаПолейКоординаты = ПолучитьСоответствиеИменаПолейКоординаты();	
	КоличествоКолонок    = ИменаПолейКоординаты.Количество();
	
	Для R = 2 По КоличествоСтрок Цикл		  
		
		СтрокаДанных = Новый Структура(ПолучитьИменаПолей());		
		Для C = 1 По КоличествоКолонок Цикл

			Попытка
				
				ИмяКлючаПоля= "Rx" + "C" + C;   
				ИмяПоля     = ИменаПолейКоординаты.Получить(ИмяКлючаПоля);			
  				ИмяОбласти  = СтрЗаменить(ИмяКлючаПоля, "x", Формат(R, "ЧГ=0;"));			
				
				ТекстЯчейки = Строка(ТабДок.ПолучитьОбласть(ИмяОбласти).ТекущаяОбласть.Текст);					
				СтрокаДанных[ИмяПоля] = ТекстЯчейки; 				
			Исключение     
				
			    ТекстОшибки = ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Новый Массив;
			КонецПопытки;
			
		КонецЦикла;			
		МассивДанных.Добавить(СтрокаДанных);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьСсылочныеПоля(ДанныеИзТабличногоДокумента)
	
	Для Каждого ТекСтрока Из ДанныеИзТабличногоДокумента Цикл
		
		ПроектОбработка(ТекСтрока);
		
		КабельнаяЛинияОбработка(ТекСтрока);
		
		ПомещениеОбработка(ТекСтрока, Истина);
		ПомещениеОбработка(ТекСтрока, Ложь);

		ОборудованиеОбработка(ТекСтрока, Истина);
		ОборудованиеОбработка(ТекСтрока, Ложь);
		
		КоординатыОбработка(ТекСтрока, Истина);
		КоординатыОбработка(ТекСтрока, Ложь);
		
		СоздатьЖурналУчетаКабельнойПродукции(ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСсылочныхПолей

&НаСервереБезКонтекста
Процедура ПроектОбработка(ТекСтрока)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТекСтрока.Свойство("НомерПроекта") Тогда
		Возврат;	
	КонецЕсли;
	
	НомерПроекта = ТекСтрока.НомерПроекта;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("НомерПроекта", НомерПроекта);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Проекты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Проекты КАК Проекты
	               |ГДЕ
	               |	Проекты.НомерПроекта = &НомерПроекта";
	
	Результат = Запрос.Выполнить();
	
	СсылкаПроект = Справочники.Проекты.ПустаяСсылка();
	
	Если Результат.Пустой() Тогда    
		
		Проект              = Справочники.Проекты.СоздатьЭлемент();	
		Проект.Наименование = НомерПроекта;
		ЗаполнитьЗначенияСвойств(Проект, ТекСтрока);   
		Проект.Записать(); 
		
		СсылкаПроект = Проект.Ссылка;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СсылкаПроект = Выборка.Ссылка;		
	КонецЕсли;
	
	ТекСтрока.Вставить("Проект", СсылкаПроект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КабельнаяЛинияОбработка(ТекСтрока)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТекСтрока.Свойство("МаркировкаКабеля") Тогда
		Возврат;	
	КонецЕсли;
	
	МаркаКабеля = ТекСтрока.МаркировкаКабеля;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("МаркаКабеля", МаркаКабеля);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КабельныеЛинии.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.КабельныеЛинии КАК КабельныеЛинии
	               |ГДЕ
	               |	КабельныеЛинии.Код = &МаркаКабеля";
	
	Результат            = Запрос.Выполнить();	
	СсылкаКабельнаяЛиния = Справочники.КабельныеЛинии.ПустаяСсылка();
	
	Если Результат.Пустой() Тогда    
		
		КабельнаяЛиния              = Справочники.КабельныеЛинии.СоздатьЭлемент();	 
		КабельнаяЛиния.Наименование = МаркаКабеля;
		ЗаполнитьЗначенияСвойств(КабельнаяЛиния, ТекСтрока); 
		КабельнаяЛиния.Записать(); 
		
		СсылкаКабельнаяЛиния = КабельнаяЛиния.Ссылка;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СсылкаКабельнаяЛиния = Выборка.Ссылка;		
	КонецЕсли;
	
	ТекСтрока.Вставить("КабельнаяЛиния", СсылкаКабельнаяЛиния);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПомещениеОбработка(ТекСтрока, Откуда = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Откуда И Не ТекСтрока.Свойство("ОткудаПомещение") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не Откуда И Не ТекСтрока.Свойство("КудаПомещение") Тогда
		Возврат;	
	КонецЕсли;
	
	Наименование = ?(Откуда, ТекСтрока.ОткудаПомещение, ТекСтрока.КудаПомещение);
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Помещения.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Помещения КАК Помещения
	               |ГДЕ
	               |	Помещения.Наименование = &Наименование";
	
	Результат       = Запрос.Выполнить();	
	СсылкаПомещение = Справочники.Помещения.ПустаяСсылка();
	
	Если Результат.Пустой() Тогда    
		
		Помещение      = Справочники.Помещения.СоздатьЭлемент();	 
		Помещение.Наименование = Наименование;   
		Помещение.Записать(); 
		
		СсылкаПомещение = Помещение.Ссылка;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СсылкаПомещение = Выборка.Ссылка;		
	КонецЕсли;
	
	Если Откуда Тогда
		ТекСтрока.ОткудаПомещение = СсылкаПомещение;
	Иначе     
		ТекСтрока.КудаПомещение   = СсылкаПомещение;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОборудованиеОбработка(ТекСтрока, Откуда = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Откуда И Не ТекСтрока.Свойство("ОткудаОборудование") Тогда
		Возврат;	
	КонецЕсли;
	
	Если Не Откуда И Не ТекСтрока.Свойство("КудаОборудование") Тогда
		Возврат;	
	КонецЕсли;
	
	Наименование = ?(Откуда, ТекСтрока.ОткудаОборудование, ТекСтрока.КудаОборудование);
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыОборудования.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТипыОборудования КАК ТипыОборудования
	               |ГДЕ
	               |	ТипыОборудования.Наименование = &Наименование";
	
	Результат          = Запрос.Выполнить();	
	СсылкаОборудование = Справочники.ТипыОборудования.ПустаяСсылка();
	
	Если Результат.Пустой() Тогда    
		
		ТипОборудования              = Справочники.ТипыОборудования.СоздатьЭлемент();	
		ЗаполнитьЗначенияСвойств(ТипОборудования, ТекСтрока);
		ТипОборудования.Наименование = Наименование;
		ТипОборудования.Записать(); 
		
		СсылкаОборудование = ТипОборудования.Ссылка;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СсылкаОборудование = Выборка.Ссылка;		
	КонецЕсли;
	
	Если Откуда Тогда
		ТекСтрока.ОткудаОборудование = СсылкаОборудование;
	Иначе     
		ТекСтрока.КудаОборудование   = СсылкаОборудование;		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КоординатыОбработка(ТекСтрока, Откуда = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	X = "";
	Y = "";
	Z = "";
	
	Если Откуда Тогда	
		
		Если Не ТекСтрока.Свойство("X") Тогда
			Возврат;	
		КонецЕсли;
		
		X = ТекСтрока.X;
		Y = ТекСтрока.Y;
		Z = ТекСтрока.Z;		
	Иначе      
		
		Если Не ТекСтрока.Свойство("X1") Тогда
			Возврат;	
		КонецЕсли;
		
		X = ТекСтрока.X1;
		Y = ТекСтрока.Y1;
		Z = ТекСтрока.Z1;	
	КонецЕсли;
	
	Наименование = X + "/" + Y + "/" + Z;
	
	Если СтрЗаменить(Наименование, "//", "") = "" Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Координаты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Координаты КАК Координаты
	               |ГДЕ
	               |	Координаты.Наименование = &Наименование";
	
	Результат        = Запрос.Выполнить();	
	СсылкаКоординаты = Справочники.Координаты.ПустаяСсылка();
	
	Если Результат.Пустой() Тогда    
		
		Координаты   = Справочники.Координаты.СоздатьЭлемент();	 
		Координаты.X = X;  
		Координаты.Y = Y;  
		Координаты.Z = Z;  
		
		Координаты.Записать(); 
		
		СсылкаКоординаты = Координаты.Ссылка;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СсылкаКоординаты = Выборка.Ссылка;		
	КонецЕсли;
	
	Если Откуда Тогда
		ТекСтрока.Вставить("ОткудаКоординаты", СсылкаКоординаты);
	Иначе     
		ТекСтрока.Вставить("КудаКоординаты", СсылкаКоординаты);		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЖурналУчетаКабельнойПродукции(ТекСтрока)

	УстановитьПривилегированныйРежим(Истина);	
	
	Если Не ТекСтрока.Свойство("НомерПП") Тогда
		Возврат;	
	КонецЕсли;
	
	НомерПП = ТекСтрока.НомерПП;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерПП", НомерПП);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖурналыУчетаКабельнойПродукции.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЖурналыУчетаКабельнойПродукции КАК ЖурналыУчетаКабельнойПродукции
	               |ГДЕ
	               |	ЖурналыУчетаКабельнойПродукции.Код = &НомерПП";
	
	Результат = Запрос.Выполнить();
	
	ЖурналУчетаКабели = Неопределено;
	
	Если Результат.Пустой() Тогда
		
		ЖурналУчетаКабели     = Справочники.ЖурналыУчетаКабельнойПродукции.СоздатьЭлемент();
		ЖурналУчетаКабели.Код = НомерПП;
	Иначе          
		
		Выборка = Результат.Выбрать();    
		Выборка.Следующий();
		
		ЖурналУчетаКабели = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЖурналУчетаКабели, ТекСтрока); 
	
	ЖурналУчетаКабели.Записать();
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналУчетаКабели.Ссылка);
	
КонецПроцедуры
#КонецОбласти

#Область ПрочиеПроцедурыФункции

&НаСервереБезКонтекста
Функция ПолучитьИменаПолей()

	Возврат "НомерПП, НомерПроекта, АрхивныйНомер, Объект, Изм, 
			|НомерНитки, МаркировкаКабеля, МаркировкаКабеляПроектная, 
			|СечениеПроектное, КлассБезопасности, ОткудаПомещение, ОткудаОборудование,
			|X, Y, Z, КудаПомещение, КудаОборудование, X1, Y1, Z1, Длина";	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеИменаПолейКоординаты()

	ИменаПолейКоординаты = Новый Соответствие;
	ИменаПолейКоординаты.Вставить("RxC1",  "НомерПП");	
	ИменаПолейКоординаты.Вставить("RxC2",  "НомерПроекта");	
	ИменаПолейКоординаты.Вставить("RxC3",  "АрхивныйНомер");	
	ИменаПолейКоординаты.Вставить("RxC4",  "Объект");	
	ИменаПолейКоординаты.Вставить("RxC5",  "Изм");	
	ИменаПолейКоординаты.Вставить("RxC6",  "НомерНитки");	
	ИменаПолейКоординаты.Вставить("RxC7",  "МаркировкаКабеля");	
	ИменаПолейКоординаты.Вставить("RxC8",  "МаркировкаКабеляПроектная");	
	ИменаПолейКоординаты.Вставить("RxC9",  "СечениеПроектное");	
	ИменаПолейКоординаты.Вставить("RxC10", "КлассБезопасности");	
	ИменаПолейКоординаты.Вставить("RxC11", "ОткудаПомещение");	
	ИменаПолейКоординаты.Вставить("RxC12", "ОткудаОборудование");	
	ИменаПолейКоординаты.Вставить("RxC13", "X");	
	ИменаПолейКоординаты.Вставить("RxC14", "Y");	
	ИменаПолейКоординаты.Вставить("RxC15", "Z");	
	ИменаПолейКоординаты.Вставить("RxC16", "КудаПомещение");	
	ИменаПолейКоординаты.Вставить("RxC17", "КудаОборудование");	
	ИменаПолейКоординаты.Вставить("RxC18", "X1");	
	ИменаПолейКоординаты.Вставить("RxC19", "Y1");	
	ИменаПолейКоординаты.Вставить("RxC20", "Z1");	
	ИменаПолейКоординаты.Вставить("RxC21", "Длина");	
	
	Возврат ИменаПолейКоординаты;
	
КонецФункции
#КонецОбласти