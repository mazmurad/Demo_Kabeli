#Область СобытияФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("ИмяДокумента", ИмяДокумента);
	
	УстановитьЗаголовкиПоДокументуОснования();		
	УстановитьВидимостьРеквизитовПоДокументуОснования();
	
	Если ПереданСписокКабельныхЛинийИзОбъектаОснования() Тогда
		ЗагрузитьКабельныеЛинииДокументаОснования(Параметры.СписокКабельныхЛиний);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПоДокументуОснования()
	
	Если ЗначениеЗаполнено(ИмяДокумента) Тогда
		Заголовок                                   = ИмяДокумента;	
		Элементы.ГруппаСозданныеДокументы.Заголовок = ИмяДокумента; 
		Элементы.СоздатьДокументы.Заголовок         = "Создать " + ИмяДокумента;
	Иначе
		Заголовок                                   = "Групповая обработка документов";			
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовПоДокументуОснования()
	
	Если ИмяДокумента = ЗаданияНаЗакупку Тогда
		Элементы.Подрядчик.Видимость = Истина; 
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Функция ПереданСписокКабельныхЛинийИзОбъектаОснования()

	Возврат Параметры.Свойство("СписокКабельныхЛиний");	
	
КонецФункции

#КонецОбласти

#Область ПодборДобавитьКабельныеЛинии
&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыФормыПодбора = Новый Структура("СписокВыбранныхКабельныхЛиний", ПрочитатьСписокВыбранныхКабельныхЛиний());	
	ОткрытьФорму("ОбщаяФорма.ПодборКабельныхЛиний", ПараметрыФормыПодбора, Элементы.ВыбранныеКабельныеЛинии, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Функция ПрочитатьСписокВыбранныхКабельныхЛиний()

	СписокВыбранныхКабельныхЛиний = Новый Массив;
	Для Каждого ТекКабЛиния Из ВыбранныеКабельныеЛинии Цикл
		СписокВыбранныхКабельныхЛиний.Добавить(ТекКабЛиния.КабельнаяЛиния);	
	КонецЦикла;
	
	Возврат СписокВыбранныхКабельныхЛиний;
	
КонецФункции

&НаКлиенте
Процедура ВыбранныеКабельныеЛинииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранныеКабельныеЛинии.Очистить();	
	Для каждого ТекКабЛини Из ВыбранноеЗначение Цикл		
		НоваяКабельнаяЛиния = ВыбранныеКабельныеЛинии.Добавить();
		НоваяКабельнаяЛиния.КабельнаяЛиния = ТекКабЛини;
	КонецЦикла;
	
	ЗагрузитьСозданныеДокументыПоКабельнымЛиниям();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеКабельныеЛинииПриИзменении(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	КабельнаяЛиния = ТекущиеДанные.КабельнаяЛиния;	
	ЗагрузитьСозданныеДокументыПоКабельнымЛиниям(КабельнаяЛиния, Истина);
	
КонецПроцедуры
#КонецОбласти

#Область СоздатьДокументы
&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если Не КабельныеЛинииПодобраны() Тогда
		Возврат;	
	КонецЕсли;
	
	Если ИмяДокумента = ЗаданияНаЗакупку Тогда
		СоздатьЗаданияНаЗакупку();
	ИначеЕсли ИмяДокумента = "" Тогда
	ИначеЕсли ИмяДокумента = "" Тогда
	ИначеЕсли ИмяДокумента = "" Тогда		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КабельныеЛинииПодобраны()
	
	Возврат ВыбранныеКабельныеЛинии.Количество() <> 0;
	
КонецФункции

&НаСервере
Процедура СоздатьЗаданияНаЗакупку()

			
	
КонецПроцедуры
#КонецОбласти

#Область ДополнительныеОперации
&НаСервере
Процедура ЗагрузитьКабельныеЛинииДокументаОснования(СписокКабельныхЛиний)

	Для Каждого ТекКабЛиния Из СписокКабельныхЛиний Цикл
		НовКабЛиния = ВыбранныеКабельныеЛинии.Добавить();
		НовКабЛиния.КабельнаяЛиния = ТекКабЛиния;
	КонецЦикла;	
	
	ЗагрузитьСозданныеДокументыПоКабельнымЛиниям();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСозданныеДокументыПоКабельнымЛиниям(КабельнаяЛиния = Неопределено, Дополнить = Ложь)
	
	СписокВыбранныхКабельныхЛиний = ?(КабельнаяЛиния = Неопределено, 
		ВыбранныеКабельныеЛинии.Выгрузить().ВыгрузитьКолонку("КабельнаяЛиния"), КабельнаяЛиния);
	
	СписокДокументов = ПрочитатьДокументыПоКабельнымЛиниям(СписокВыбранныхКабельныхЛиний, ИмяДокумента, ЗаданияНаЗакупку);
	
	Если Дополнить Тогда
		Для каждого ТекСтрокаДокумента Из СписокДокументов Цикл   
			
			Если СозданныеДокументы.НайтиПоЗначению(ТекСтрокаДокумента) <> Неопределено Тогда
				Продолжить;	
			КонецЕсли;			
			СозданныеДокументы.Добавить(ТекСтрокаДокумента, ТекСтрокаДокумента);
			
		КонецЦикла;
	Иначе    
		СозданныеДокументы.Очистить();
		СозданныеДокументы.ЗагрузитьЗначения(СписокДокументов);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьДокументыПоКабельнымЛиниям(СписокВыбранныхКабельныхЛиний, ИмяДокумента, ЗаданияНаЗакупку)

	Если ИмяДокумента = ЗаданияНаЗакупку Тогда		
		СписокДокументов = ПрочитатьЗаданияНаЗакупку(СписокВыбранныхКабельныхЛиний);	
	Иначе
		СписокДокументов = Новый Массив;
	КонецЕсли;	
	
	Возврат СписокДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьЗаданияНаЗакупку(СписокКабЛиний)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКабельныхЛиний", СписокКабЛиний); 	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаданияНаЗакупкуКабельныеЛинии.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.ЗаданияНаЗакупку.КабельныеЛинии КАК ЗаданияНаЗакупкуКабельныеЛинии
	               |ГДЕ
	               |	ЗаданияНаЗакупкуКабельныеЛинии.КабельнаяЛиния В(&СписокКабельныхЛиний)";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Документ");
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ВыбранныеКабельныеЛинииПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;   
	
	КабельнаяЛиния = ТекущиеДанные.КабельнаяЛиния;
	Если Не ЗначениеЗаполнено(КабельнаяЛиния) Тогда
		Возврат;	
	КонецЕсли;
	
	СписокДокументов = ПрочитатьДокументыПоКабельнымЛиниям(КабельнаяЛиния, ИмяДокумента, ЗаданияНаЗакупку);	
	Для каждого ТекДокумент Из СписокДокументов Цикл    
		
		ЭлементДокумент = СозданныеДокументы.НайтиПоЗначению(ТекДокумент);		
		Если ЭлементДокумент <> Неопределено Тогда
			СозданныеДокументы.Удалить(ЭлементДокумент);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

ЗаданияНаЗакупку = "Задания на закупку";